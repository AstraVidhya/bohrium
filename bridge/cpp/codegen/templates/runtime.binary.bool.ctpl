#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp

%for $op, $opcode, $optype, $opcount, $typesigs, $layouts, $broadcast in $data

//
// $op - $opcode - $optype - $opcount
//
%if ["A", "A", "A"] in $layouts
template <typename InT>
multi_array<bool>& $op (multi_array<bool>& res, multi_array<InT>& lhs, multi_array<InT>& rhs)
{
    Runtime::instance().typecheck<$opcode, bool, InT, InT>();
    Runtime::instance().enqueue((bh_opcode)$opcode, res, lhs, rhs);
    return res;
}
%end if

%if ["A", "A", "K"] in $layouts
template <typename InT>
multi_array<bool>& $op (multi_array<bool>& res, multi_array<InT>& lhs, const InT rhs)
{
    Runtime::instance().typecheck<$opcode, bool, InT, InT>();
    Runtime::instance().enqueue((bh_opcode)$opcode, res, lhs, rhs);
    return res;
}
%end if

%if ["A", "K", "A"] in $layouts
template <typename InT>
multi_array<bool>& $op (multi_array<bool>& res, const InT lhs, multi_array<InT>& rhs)
{
    Runtime::instance().typecheck<$opcode, bool, InT, InT>();
    Runtime::instance().enqueue((bh_opcode)$opcode, res, lhs, rhs);
    return res;
}
%end if

%end for

