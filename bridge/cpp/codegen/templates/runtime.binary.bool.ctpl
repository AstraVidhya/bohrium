#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp

%for $op, $opcode, $optype, $opcount, $typesigs in $data
// Explicit result array
template <typename OutT, typename InT>
multi_array<OutT>& $op (multi_array<OutT>& res, multi_array<InT>& lhs, multi_array<InT>& rhs)
{
    Runtime::instance().typecheck<$opcode, OutT, InT, InT>();

    multi_array<InT>* left    = &lhs;
    multi_array<InT>* right   = &rhs;
    
    // Broadcast
    if (!same_shape(*left, *right)) {
        left    = &Runtime::instance().temp_view(lhs);
        right   = &Runtime::instance().temp_view(rhs);

        if (lhs.getRank() < rhs.getRank()) {    // Left-handside has lowest rank
            if (!broadcast(*left, *right)) {
                throw std::runtime_error("Failed broadcasting.");
            }
        } else {                                // Right-handside has lowest rank
            if (!broadcast(*right, *left)) {
                throw std::runtime_error("Failed broadcasting.");
            }
        }
    }

    // Check that operands are compatible with the output
    // TODO: Broadcasting should also be done in relation to output
    //       for now we simply fail...
    if (!same_shape(res, *right)) {
        throw std::runtime_error("Incompatible shapes of output and input.");
    }

    Runtime::instance().enqueue((bh_opcode)$opcode, res, *left, *right);

    return res;
}

template <typename OutT, typename InT>
multi_array<OutT>& $op (multi_array<OutT>& res, multi_array<InT>& lhs, const InT rhs)
{
    Runtime::instance().typecheck<$opcode, OutT, InT, InT>();

    multi_array<InT>* left = &lhs;

    // Check for unbroadcastable situation
    if (res.getRank() < left->getRank()) {
        std::stringstream s;
        s << "Incompatible shapes " << "$op: " << res.getRank() << ", " << left->getRank() << "." << std::endl;
        throw std::runtime_error(s.str());
    }

    // Broadcast
    if (!same_shape(res, *left)) {
        left = &Runtime::instance().temp_view(lhs);
        
        if (!broadcast_right(res, *left)) {
            throw std::runtime_error("LHS is not broadcastable.");
        }
        
        //
        // Re-check compatibility
        if (!same_shape(res, *left)) {
            throw std::runtime_error("Incompatable shapes after attempted broadcast.");
        }
    }

    Runtime::instance().enqueue((bh_opcode)$opcode, res, *left, rhs);
    return res;
}

template <typename OutT, typename InT>
multi_array<OutT>& $op (multi_array<OutT>& res, const InT lhs, multi_array<InT>& rhs)
{
    Runtime::instance().typecheck<$opcode, OutT, InT, InT>();

    multi_array<InT>* right = &rhs;

    // Check for unbroadcastable situation
    if (res.getRank() < right->getRank()) {
        std::stringstream s;
        s << "Incompatible shapes " << "$op: " << res.getRank() << ", " << right->getRank() << "." << std::endl;
        throw std::runtime_error(s.str());
    }

    // Broadcast
    if (!same_shape(res, *right)) {
        right = &Runtime::instance().temp_view(lhs);
        
        if (!broadcast_right(res, *right)) {
            throw std::runtime_error("LHS is not broadcastable.");
        }
        
        //
        // Re-check compatibility
        if (!same_shape(res, *right)) {
            throw std::runtime_error("Incompatable shapes after attempted broadcast.");
        }
    }

    Runtime::instance().enqueue((bh_opcode)$opcode, res, lhs, *right);
    return res;
}

//
// Implicit temporary result array
//
template <typename T>
multi_array<bool>& $op (multi_array<T> &lhs, multi_array<T> &rhs)
{
    Runtime::instance().typecheck<$opcode, bool, T, T>();

    multi_array<T>* left    = &lhs;
    multi_array<T>* right   = &rhs;
    
    // Broadcast
    if (!same_shape(*left, *right)) {
        left    = &Runtime::instance().temp_view(lhs);
        right   = &Runtime::instance().temp_view(rhs);

        if (lhs.getRank() < rhs.getRank()) {    // Left-handside has lowest rank
            if (!broadcast(*left, *right)) {
                throw std::runtime_error("Failed broadcasting.");
            }
        } else {                                // Right-handside has lowest rank
            if (!broadcast(*right, *left)) {
                throw std::runtime_error("Failed broadcasting.");
            }
        }
    }

    // Construct output / result array
    multi_array<bool>* result = &Runtime::instance().temp<bool, T>(*left);
    result->link();

    Runtime::instance().enqueue((bh_opcode)$opcode, *result, *left, *right);
    return *result;
}

template <typename T>
multi_array<bool>& $op (multi_array<T>& lhs, const T rhs)
{
    Runtime::instance().typecheck<$opcode, bool, T, T>();

    multi_array<bool>* result = &Runtime::instance().temp<bool, T>(lhs);
    result->link();

    Runtime::instance().enqueue((bh_opcode)$opcode, *result, lhs, rhs);
    return *result;
}

template <typename T>
multi_array<bool>& $op (const T lhs, multi_array<T>& rhs)
{
    Runtime::instance().typecheck<$opcode, bool, T, T>();

    multi_array<bool>* result = &Runtime::instance().temp<bool, T>(rhs);
    result->link();

    Runtime::instance().enqueue((bh_opcode)$opcode, *result, lhs, rhs);
    return *result;
}

%end for

