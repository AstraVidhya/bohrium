#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
/*
This file is part of Bohrium and copyright (c) 2012 the Bohrium team:
http://bohrium.bitbucket.org

Bohrium is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3
of the License, or (at your option) any later version.

Bohrium is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the
GNU Lesser General Public License along with Bohrium.

If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef __BOHRIUM_BRIDGE_CPP_RUNTIME_TYPECHECKER
#define __BOHRIUM_BRIDGE_CPP_RUNTIME_TYPECHECKER
#include <iostream>
#include <sstream>
#include <typeinfo>

namespace bxx {

//
//  Default to deny
//
template <size_t Opcode, typename Out, typename In1, typename In2>
inline
bool Runtime::typecheck(void)
{
    std::stringstream ss;
    ss << "Bytecode(" << Opcode << ") instruction";
    ss << " has invalid type signature: ";
    ss << typeid(Out).name();
    ss << ",";
    ss << typeid(In1).name();
    ss << ",";
    ss << typeid(In2).name();
    ss << ".";

    throw std::runtime_error(ss.str());
    return false;
}

template <size_t Opcode, typename Out, typename In1>
inline
bool Runtime::typecheck(void)
{
    std::stringstream ss;
    ss << "Bytecode(" << Opcode << ") instruction";
    ss << " has invalid type signature: ";
    ss << typeid(Out).name();
    ss << ",";
    ss << typeid(In1).name();
    ss << ",";
    ss << typeid(In2).name();
    ss << ".";

    throw std::runtime_error(ss.str());
    return false;
}

template <size_t Opcode, typename Out>
inline
bool Runtime::typecheck(void)
{
    std::stringstream ss;
    ss << "Bytecode(" << Opcode << ") instruction";
    ss << " has invalid type signature: ";
    ss << typeid(Out).name();
    ss << ",";
    ss << typeid(In1).name();
    ss << ",";
    ss << typeid(In2).name();
    ss << ".";

    throw std::runtime_error(ss.str());
    return false;
}

//
//  Allowed types.
//
%for $op, $opcode, $optype, $opcount, $typesigs in $data
%for $typesig in $typesigs

%if $opcount == 3

template <>
inline
bool Runtime::typecheck<$opcode, $typesig[0], $typesig[1], $typesig[2]>(void) { return true; }
%else if $opcount == 2

template <>
inline
bool Runtime::typecheck<$opcode, $typesig[0], $typesig[1]>(void) { return true; }
%else if $opcount == 1

template <>
inline
bool Runtime::typecheck<$opcode, $typesig[0]>(void) { return true; }
%end if
%end for
%end for

}
#endif

