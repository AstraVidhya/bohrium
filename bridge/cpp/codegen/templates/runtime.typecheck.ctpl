/*
bool bh_typecheck(bh_instruction* instr)
{
    // Poly contains a unique value, pairing an opcode with its
    // function signature all in one nicely switchable value.
    long int poly;

    if (bh_operands(opcode) == 3) {                 // Three operands
        if (inputtype1 == BH_UNKNOWN) {             // First operand is constant
            poly = opcode \
                | (outtype << 8) \
                | (constanttype << 12) \
                | (inputtype2 << 16);

        } else if (inputtype2 == BH_UNKNOWN) {      // Second operand is constant
            poly = opcode
                | (outtype << 8) \
                | (inputtype1 << 12) \
                | (constanttype << 16);

        } else {                                     // No constant operand
            poly = opcode \
                | (outtype << 8) \
                | (inputtype1 << 12) \
                | (inputtype2 << 16);
        }
    } else {                                         // Two operands
        if (inputtype1 == BH_UNKNOWN) {
            poly = opcode \
                | (outtype << 8) \
                | (constanttype << 12) \
                | (1 << 17);
        } else {
            poly = opcode \
                | (outtype << 8) \
                | (inputtype1 << 12) \
                | (1 << 17);
        }
    }

    switch (poly) {
        case BH_ADD | (BH_INT8 << 8) | (BH_INT8 << 12) | (BH_INT8 << 16):
        case BH_ADD | (BH_FLOAT64 << 8) | (BH_FLOAT64 << 12) | (BH_FLOAT64 << 16):
            return true;
    
        default:
            return false;
    }
}

*/
class Typechecker
{
    template <typename Opcode, typename Out, typename In1, typename In2>
    check();
};

