#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
%for $op, $opcode, $optype, $opcount in $data
%if $optype == "operator.ext"
%if $opcode != "CUSTOM"
%if $opcount == 3

template <typename T>
Vector<T> & operator $op ( Vector<T> & lhs, Vector<T> & rhs )
{
    std::cout << lhs << " $op " << rhs << std::endl;
    Vector<T>* vector = new Vector<T>( lhs );
    enqueue_aaa( (bh_opcode)$opcode, *vector, lhs, rhs );
    return *vector;
}

template <typename T>
Vector<T> & operator $op ( Vector<T> & lhs, T const& rhs )
{
    std::cout << lhs << " $op " << rhs << std::endl;
    Vector<T>* vector = new Vector<T>( lhs );
    enqueue_aac( (bh_opcode)$opcode, *vector, lhs, rhs );
    return *vector;
}

template <typename T>
Vector<T> & operator $op ( T const& lhs, Vector<T> & rhs )
{
    std::cout << lhs << " $op " << rhs << std::endl;
    Vector<T>* vector = new Vector<T>( rhs );
    enqueue_aca( (bh_opcode)$opcode, *vector, lhs, rhs );
    return *vector;
}

%else
template <typename T>
Vector<T> & operator $op ( Vector<T> & vector )
{
    std::cout << vector << " $op " << std::endl;
    enqueue_ac( (bh_opcode)$opcode, vector, vector );
    return vector;
}

%end if
%end if
%end if
%end for

