#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
//
//  Internally defined operator overloads
//
template <typename T>
multi_array<T>& multi_array<T>::operator= ( T const& rhs )
{
    Runtime::instance()->enqueue( (bh_opcode)BH_IDENTITY, *this, rhs );
    return *this;
}

%for $op, $opcode, $optype, $opcount in $data
%if $optype == "operator.int" and $opcode != "CUSTOM" and $opcount == 2

template <typename T>
multi_array<T>& multi_array<T>::operator $op ( multi_array<T> & rhs )
{
    Runtime::instance()->enqueue( (bh_opcode)$opcode, *this, rhs );
    return *this;
}
%slurp
%end if
%end for
%slurp
%for $op, $opcode, $optype, $opcount in $data
%if $optype == "operator.int" and $opcode == "CUSTOM" and $opcount == 2

template <typename T>
multi_array<T>& multi_array<T>::operator $op ( const T rhs )
{
    // TODO: implement
    return *this;
}

template <typename T>
multi_array<T>& multi_array<T>::operator $op ( multi_array<T> & rhs )
{
    // TODO: implement
    return *this;
}
%slurp
%end if
%end for
