#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp

//
//  Internally defined operator overloads
//

%for $op, $opcode, $optype, $opcount in $data
%if $optype == "operator.int" and $opcode != "CUSTOM" and $opcount == 2

template <typename T>
Vector<T>& Vector<T>::operator $op ( const T rhs )
{
    enqueue( (bh_opcode)$opcode, *this, rhs );
    return *this;
}

template <typename T>
Vector<T>& Vector<T>::operator $op ( Vector<T> & rhs )
{
    enqueue( (bh_opcode)$opcode, *this, rhs );
    return *this;
}

%end if
%end for

%for $op, $opcode, $optype, $opcount in $data
%if $optype == "operator.int" and $opcode == "CUSTOM" and $opcount == 2

template <typename T>
Vector<T>& Vector<T>::operator $op ( const T rhs )
{
    // TODO: implement
    return *this;
}

template <typename T>
Vector<T>& Vector<T>::operator $op ( Vector<T> & rhs )
{
    // TODO: implement
    return *this;
}

%end if
%end for

