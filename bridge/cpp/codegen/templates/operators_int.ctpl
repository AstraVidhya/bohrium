#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp

#include <sstream>

//
//  Internally defined operator overloads
//

%for $op, $opcode, $optype, $opcount, $typesigs in $data
%if $optype == "operator.int" and $opcode != "CUSTOM" and $opcount == 3

template <typename T>
inline multi_array<T>& multi_array<T>::operator$op (const T& rhs)
{
    Runtime::instance().enqueue((bh_opcode)$opcode, *this, *this, rhs);
    return *this;
}

template <typename T>
inline multi_array<T>& multi_array<T>::operator$op (multi_array<T>& rhs)
{
    multi_array<T>* right   = &rhs;
    
    //
    // We cannot perform the operation since we cannot broadcast *this                                        
    if (this->getRank() < right->getRank()) {
        std::stringstream s;
        s << "BINARY-BUNKERS " << "$op: " << this->getRank() << ", " << right->getRank() << "." << std::endl;
        throw std::runtime_error(s.str());
    }

    //
    // Broadcast
    if (!same_shape(*this, *right)) {
        right = &Runtime::instance().temp_view(rhs);
        
        if (!broadcast_right(*this, *right)) {
            throw std::runtime_error("Right-handside is not broadcastable.");
        }
    }
    //
    // Re-check compatibility
    if (!same_shape(*this, *right)) {
        throw std::runtime_error("Incompatable shapes, even after broadcast.");
    }
    Runtime::instance().enqueue((bh_opcode)$opcode, *this, *this, *right);
    return *this;
}
%slurp
%end if
%end for
%for $op, $opcode, $optype, $opcount, $typesigs in $data
%if $optype == "operator.int" and $opcode != "CUSTOM" and $opcount == 2

template <typename T>
inline multi_array<T>& multi_array<T>::operator$op (const T& rhs)
{
    Runtime::instance().enqueue((bh_opcode)$opcode, *this, rhs);
    return *this;
}

template <typename T>
inline multi_array<T>& multi_array<T>::operator$op (multi_array<T>& rhs)
{
    multi_array<T>* right = &rhs;
                                            
    if (this->getRank() < right->getRank()) {           // This would be illogical...
        std::stringstream s;
        s << "Incompatible shape in 'operator$op'; lrank(" << this->getRank() << ") is less than rrank(" << input->getRank() << ")." << std::endl;
        throw std::runtime_error(s.str());
    }

    // Broadcast
    if (!same_shape(*this, *input)) {
        right = &Runtime::instance().temp_view(rhs);
        
        if (!broadcast_right(*this, *right)) {
            throw std::runtime_error("Right-handside is not broadcastable.");
        }
    }
    if (!same_shape(*this, *right)) {
        throw std::runtime_error("Incompatable shapes, even after broadcast.");
    }

    Runtime::instance().enqueue((bh_opcode)$opcode, *this, *right);

    return *this;
}
%slurp
%end if
%end for

