#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
//
//  Binary operators such as:
//  Mapping "a + b" to BH_ADD(t, a, b)
//  Mapping "a + 1.0" to BH_ADD(t, a, 1.0)
//  Mapping "1.0 + a" to BH_ADD(t, 1.0, a)
//
%for $op, $opcode, $optype, $opcount in $data
%if $optype == "operator.ext" and $opcode != "CUSTOM" and $opcount == 3

template <typename T>
multi_array<T>& operator$op (multi_array<T>& lhs, multi_array<T>& rhs)
{
    multi_array<T>* broadcast;
    multi_array<T>* result; 

    if (compatible_shape(lhs, rhs)) {
        result = &Runtime::instance()->temp(lhs);
    } else {
        std::cout << "Incompatible shape, possibly broadcastable." << std::endl;

        // Create a view pointing to the operand with lowest rank
        broadcast = &Runtime::instance()->view(rhs);
        
        // Broadcast the shape and stride for the view
        result    = &Runtime::instance()->temp(rhs);
    }

    // Shape of "result" should be defined by broadcast

    Runtime::instance()->enqueue((bh_opcode)$opcode, *result, lhs, rhs);

    return *result;
}

template <typename T>
multi_array<T> & operator$op (multi_array<T>& lhs, const T& rhs)
{
    multi_array<T>* result = &Runtime::instance()->temp(lhs);

    Runtime::instance()->enqueue((bh_opcode)$opcode, *result, lhs, rhs);

    return *result;
}

template <typename T>
multi_array<T> & operator$op (const T& lhs, multi_array<T>& rhs)
{
    multi_array<T>* result = &Runtime::instance()->temp(rhs);

    Runtime::instance()->enqueue((bh_opcode)$opcode, *result, lhs, rhs);

    return *result;
}
%slurp
%end if
%end for

//
//  Unary operators such as:
//  Mapping "!a" to BH_NEGATE(t, a)
//
%for $op, $opcode, $optype, $opcount in $data
%if $optype == "operator.ext" and $opcode != "CUSTOM" and $opcount == 2

template <typename T>
multi_array<T> & operator$op (multi_array<T>& rhs)
{
    multi_array<T>* result = &Runtime::instance()->temp(rhs);

    Runtime::instance()->enqueue((bh_opcode)$opcode, *result, rhs);

    return *result;
}
%slurp
%end if
%end for

