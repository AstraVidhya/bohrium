#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
template <typename T>
inline
void assign_array_type(bh_base* base) {
    // TODO: The general case should result in a meaning-ful compile-time error.
    std::cout << "Unsupported type!" << base << std::cout;
}

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $data
template <>
inline
void assign_array_type<$bh_atype>(bh_base* base)
{
    base->type = $bh_enum;
}

%end for

template <>
inline
void assign_array_type<std::complex<float> >(bh_base* base)
{
    base->type = BH_COMPLEX64;
}

template <>
inline
void assign_array_type<std::complex<double> >(bh_base* base)
{
    base->type = BH_COMPLEX128;
}

