#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
%include raw "codegen/templates/license.txt"

%include raw "codegen/templates/warn.txt"

#ifndef __BOHRIUM_BRIDGE_CPP_FUNCTIONS
#define __BOHRIUM_BRIDGE_CPP_FUNCTIONS
#include "bh.h"

namespace bh {
%slurp

%for $op, $opcode, $optype, $opcount, $typesigs in $data
%if $optype == "operator.fun"
%slurp
%if $opcount == 2
template <typename T>
multi_array<T>& $op (multi_array<T> &rhs)
{
    multi_array<T>* result = &Runtime::instance().temp<T,T>(rhs);
    result->link();

    Runtime::instance().enqueue((bh_opcode)$opcode, *result, rhs);
    return *result;
}
%end if
%if $opcount == 3
template <typename T>
multi_array<T>& $op (multi_array<T> &lhs, multi_array<T> &rhs)
{
    multi_array<T>* left    = &lhs;
    multi_array<T>* right   = &rhs;

    // Broadcast input
    if (!same_shape(lhs, rhs)) {    
        left    = &Runtime::instance().temp_view(lhs);
        right   = &Runtime::instance().temp_view(rhs);

        if (lhs.getRank() < rhs.getRank()) {    // Left-handside has lowest rank
            if (!broadcast(*left, *right)) {
                throw std::runtime_error("Failed broadcasting.");
            }
        } else {                                // Right-handside has lowest rank
            if (!broadcast(*right, *left)) {
                throw std::runtime_error("Failed broadcasting.");
            }
        }
    }

    // Construct output
    multi_array<T>* result = &Runtime::instance().temp<T, T>(*left);
    result->link();

    // Enqueue operation
    Runtime::instance().enqueue((bh_opcode)$opcode, *result, *left, *right);

    return *result;
}

template <typename T>
multi_array<T>& $op (multi_array<T> &lhs, const T &rhs)
{
    multi_array<T>* result = &Runtime::instance().temp<T,T>(lhs);
    result->link();

    Runtime::instance().enqueue((bh_opcode)$opcode, *result, lhs, rhs);
    return *result;
}

template <typename T>
multi_array<T>& $op (const T &lhs, multi_array<T> &rhs)
{
    multi_array<T>* result = &Runtime::instance().temp<T,T>(rhs);
    result->link();

    Runtime::instance().enqueue((bh_opcode)$opcode, *result, lhs, rhs);
    return *result;
}

%end if
%end if
%end for

// TODO: Fix this hack-slash support for BH_REAL/IMAG
template <typename InT, typename OutT>
multi_array<OutT>& real (multi_array<InT> &rhs)
{
    multi_array<OutT>* result = &Runtime::instance().temp<OutT,InT>(rhs);
    result->link();

    Runtime::instance().enqueue((bh_opcode)BH_REAL, *result, rhs);
    return *result;
}
template <typename InT, typename OutT>
multi_array<OutT>& imag (multi_array<InT> &rhs)
{
    multi_array<OutT>* result = &Runtime::instance().temp<OutT,InT>(rhs);
    result->link();

    Runtime::instance().enqueue((bh_opcode)BH_IMAG, *result, rhs);
    return *result;
}

}
#endif

