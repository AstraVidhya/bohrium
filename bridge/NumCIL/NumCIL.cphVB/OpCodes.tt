<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(ProjectDir)..\buildsupport\Newtonsoft.Json.dll" #>
<#@ assembly name="System.Core" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NumCIL.cphVB
{
	public enum cphvb_opcode
	{
<#
		string path = null; 
		
		try { path = this.Host.ResolvePath(System.IO.Path.Combine("..", "..", "..", "core", "codegen", "opcodes.json")); }
		catch (Exception ex){ WriteLine("\t\t#warning: Failed to read file: " + ex.Message);}

		if (path != null)
			path = System.IO.Path.GetFullPath(path);

		bool realbuild = path != null && System.IO.File.Exists(path);
		if (realbuild)
		{
			using (var tr = new System.IO.StreamReader(path))
			using (Newtonsoft.Json.JsonReader rd = new Newtonsoft.Json.JsonTextReader(tr))
			{
				//Skip all comments
				rd.Read();
				while(rd.TokenType == Newtonsoft.Json.JsonToken.Comment)
					rd.Read();

				Newtonsoft.Json.Linq.JArray ja = Newtonsoft.Json.Linq.JArray.Load(rd);

				long i = 0;
				foreach (var opcode in ja)
				{
					if (opcode is Newtonsoft.Json.Linq.JObject)
					{
						string comment = "";
						string example = "";
						try { comment = (string)opcode["doc"]; }
						catch { }
						try { example = (string)opcode["code"]; }
						catch { }

						string name =  (string)opcode["opcode"];
						long id = i++;

						WriteLine("\t\t///<summary>");
						if (!string.IsNullOrEmpty(comment))
							WriteLine("\t\t/// " + comment);
						if (!string.IsNullOrEmpty(example))
							WriteLine("\t\t/// Example: " + example);
						WriteLine("\t\t/// Integer value: " + id);
						WriteLine("\t\t///</summary>");
						WriteLine("\t\t" + name + ",");
					}
				}
                    
			}
		}
		else
		{
			WriteLine("\t\t#warning Config file not found: '" + path + "', using dummy values");
			foreach(var s in new string[] {"ADD", "SUBTRACT", "DIVIDE", "MULTIPLY", "MOD", "MAXIMUM", "MINIMUM", "FLOOR", "CEIL", "RINT", "ABSOLUTE", "SQRT", "EXP", "LOG", "LOG10", "POWER", "NEGATIVE", "IDENTITY", "DISCARD", "SYNC", "FREE", "USERFUNC"})
				WriteLine("\t\tCPHVB_" + s.ToUpper() + " = -1,");
		}

#>
	}
}
