#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
#region Autogen notice
/****************************************************************
 *         This file is autogenerated, do not modify!           *
 ****************************************************************/
#endregion

#region Copyright
/*
This file is part of Bohrium and copyright (c) 2013 the Bohrium
team <http://www.bh107.org>.

Bohrium is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 
of the License, or (at your option) any later version.

Bohrium is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the 
GNU Lesser General Public License along with Bohrium. 

If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;

using int8_t = System.SByte;
using uint8_t = System.Byte;
using int16_t = System.Int16;
using uint16_t = System.UInt16;
using int32_t = System.Int32;
using uint32_t = System.UInt32;
using int64_t = System.Int64;
using uint64_t = System.UInt64;

using bh_bool = System.Boolean;
using bh_int8 = System.SByte;
using bh_uint8 = System.Byte;
using bh_int16 = System.Int16;
using bh_uint16 = System.UInt16;
using bh_int32 = System.Int32;
using bh_uint32 = System.UInt32;
using bh_int64 = System.Int64;
using bh_uint64 = System.UInt64;
using bh_float32 = System.Single;
using bh_float64 = System.Double;
using bh_complex64 = NumCIL.Complex64.DataType;
using bh_complex128 = System.Numerics.Complex;

%set $ops = $data[0]
%set $reduce_ops = $data[1]

namespace NumCIL.Bohrium2
{
    %for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
    internal partial class DataAccessor_${bh_ctype} : NumCIL.Generic.IDataAccessor<${bh_atype}>, IDisposable
    {
        protected PInvoke.bh_multi_array_${bh_ctype}_p m_array;
        protected ${bh_atype}[] m_data;
        protected readonly long m_size;
        protected GCHandle m_handle;
        protected bool m_dirty;
        private static readonly int ELSIZE = System.Runtime.InteropServices.Marshal.SizeOf(typeof(${bh_atype}));
        private static long MAX_INDEX = int.MaxValue / ELSIZE;

    
        public DataAccessor_${bh_ctype}(long size)
        {
            m_size = size;
            //Special case, we do not allocate until the first usage
        }
        
        public DataAccessor_${bh_ctype}(${bh_atype}[] data)
        {
            if (data == null)
                throw new ArgumentNullException("data");
        
            m_data = data;
            m_size = data.Length;

            //The array and handle are not allocated unless needed
        }

        public PInvoke.bh_multi_array_${bh_ctype}_p MultiArray
        {
            get { return m_array; }
            set
            {
                if (m_data == null && !m_array.IsAllocated)
                    m_array = value;
                else
                    throw new InvalidOperationException("Cannot set array on allocated instance");
            }
        }

        #region IDataAccessor implementation

        public ${bh_atype}[] AsArray()
        {
            Allocate();
            
            return m_data;
        }

        public void SetDirty()
        {
            m_dirty = true;
        }

        internal PInvoke.bh_multi_array_${bh_ctype}_p GetArrayPointer()
        {
            if (!m_array.IsAllocated)
            {
                if (m_data == null)
                {
                    Console.WriteLine("Creating data in C land");

                    // No CIL allocation, create a new multi-array
                    m_array = PInvoke.bh_multi_array_${bh_ctype}_new_from_base(
                        PInvoke.bh_multi_array_${bh_ctype}_create_base(
                            IntPtr.Zero, m_size
                        )
                    );

                    m_dirty = true;
                }
                else
                {
                    Console.WriteLine("Wraping CIL data");

                    // Existing CIL allocation, wrap it
                    m_handle = GCHandle.Alloc(m_data, GCHandleType.Pinned);
                    m_array = PInvoke.bh_multi_array_${bh_ctype}_new_from_base(
                        PInvoke.bh_multi_array_${bh_ctype}_create_base(
                            m_handle.AddrOfPinnedObject(), m_size
                        )
                    );
                }
            }

            return m_array;
        }

        private void Sync()
        {
            if (m_dirty)
            {
                Console.WriteLine("Calling sync");
                if (!m_array.IsAllocated)
                    throw new InvalidOperationException("Array cannot be dirty and not allocated");

                m_array.Sync();
                PinnedArrayTracker.Release();
                m_dirty = false;
            }
        }

        public void Allocate()
        {
            Sync();

            if (m_array.IsAllocated)
            {
                var bs = m_array.Base;
                if (m_data == null)
                {
                    Console.WriteLine("Copy data from C land");

                    //In this case, data resides in C land, 
                    // so we copy it back to CIL and free it in C land
                    m_data = new ${bh_atype}[m_size];
                    var ptr = bs.Data;
                    
                    if (ptr != IntPtr.Zero) 
                        Utility.WritePointerToArray(ptr, m_data);
                    else
                        Console.WriteLine("Array appears to be uninitialized ....");

                    m_array.Dispose();
                }
                else
                {
                    //Data resides in CIL so we detach the data pointer and
                    // release the array and unpin it
                    Console.WriteLine("Release data in C land");

                    bs.Data = IntPtr.Zero;
                    m_handle.Free();
                    m_array.Dispose();
                }
            }
            else
            {
                //Console.WriteLine("Accessed array that was never in any operation");
                if (m_data == null)
                    m_data = new ${bh_atype}[m_size];
            }
        }

        public long Length
        {
            get
            {
                return m_size;
            }
        }

        public bool IsAllocated
        {
            get
            {
                return m_data != null;
            }
        }

        public ${bh_atype} this[long index]
        {
            get
            {
                Sync();

                if (m_data == null && m_array.IsAllocated && index < MAX_INDEX)
                {
                    if (index < 0 || index >= m_size)
                        throw new ArgumentOutOfRangeException("index");

                    //Console.WriteLine("In get, using pointer");

                    //Console.WriteLine("array is {0}", m_array.AsString());

                    var bs = m_array.Base;
                    var ptr = bs.Data;
                    if (ptr == IntPtr.Zero)
                        throw new InvalidOperationException("The data pointer was null");

                    var tmp = new ${bh_atype}[1];
                    Utility.WritePointerToArray(ptr + (int)(index * ELSIZE), tmp);
                    return tmp[0];
                }

                if (m_data == null)
                    Allocate();
                                
                //Console.WriteLine("In get, using local data");
                return m_data[index];
            }
            set
            {
                Sync();

                if (m_data == null && m_array.IsAllocated && index < MAX_INDEX)
                {
                    if (index < 0 || index >= m_size)
                        throw new ArgumentOutOfRangeException("index");

                    var bs = m_array.Base;
                    var ptr = bs.Data;
                    if (ptr == IntPtr.Zero)
                        throw new InvalidOperationException("The data pointer was null");

                    var tmp = new ${bh_atype}[] { value };
                    Utility.WriteArrayToPointer(tmp, ptr + (int)(index * ELSIZE));
                    return;
                }
                    
                if (m_data == null)
                    Allocate();

                m_data[index] = value;
            }
        }

        public object Tag { get; set; }


        #endregion

        /// <summary>
        /// Releases the memory reserved by the pointer
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
        }

        /// <summary>
        /// Releases the memory reserved by the pointer
        /// </summary>
        ~DataAccessor_${bh_ctype}()
        {
            Dispose(false);
        }

        /// <summary>
        /// Releases the memory reserved by the pointer
        /// </summary>
        private void Dispose(bool disposing)
        {
            if (disposing)
                GC.SuppressFinalize(this);

            if (m_array.IsAllocated)
            {
                // If the data is in CIL, make sure C land does not free it
                if (m_data != null) 
                {
                    var bs = m_array.Base;
                    bs.Data = IntPtr.Zero;
                }

                m_array.Dispose();
            }

            if (m_handle.IsAllocated)
                m_handle.Free();
        }
    }    
    %end for
}