#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
%include "codegen/templates/warn.txt"
%include "codegen/templates/license.txt"

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;

%include "codegen/templates/typemap.cs"

%set $ops = $data[0]
%set $reduce_ops = $data[1]

namespace NumCIL.Bohrium
{
    %for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
    internal partial class DataAccessor_${bh_ctype} : NumCIL.Generic.IDataAccessor<${bh_atype}>, IDisposable, NumCIL.Generic.IFlushableAccessor
    {
        protected PInvoke.bh_multi_array_${bh_ctype}_p m_array;
        protected ${bh_atype}[] m_data;
        protected readonly long m_size;
        protected bool m_dirty;
        private static readonly int ELSIZE = System.Runtime.InteropServices.Marshal.SizeOf(typeof(${bh_atype}));
        private static long MAX_INDEX = int.MaxValue / ELSIZE;

        public DataAccessor_${bh_ctype}(${bh_atype} value, long size)
        {
            m_size = size;
            m_array = PInvoke.bh_multi_array_${bh_ctype}_new_value(value, 1, new long[] { size });            
        }
    
        public DataAccessor_${bh_ctype}(long size)
        {
            m_size = size;
            //Special case, we do not allocate until the first usage
        }
        
        public DataAccessor_${bh_ctype}(${bh_atype}[] data)
        {
            if (data == null)
                throw new ArgumentNullException("data");
        
            m_data = data;
            m_size = data.Length;

            //The array and handle are not allocated unless needed
        }

        public PInvoke.bh_multi_array_${bh_ctype}_p MultiArray
        {
            get { return m_array; }
            set
            {
                if (m_data == null && !m_array.IsAllocated)
                    m_array = value;
                else
                    throw new InvalidOperationException("Cannot set array on allocated instance");
            }
        }

        #region IDataAccessor implementation

        public ${bh_atype}[] AsArray()
        {
            Allocate();
            
            return m_data;
        }

        public void SetDirty()
        {
            m_dirty = true;
        }

        internal PInvoke.bh_multi_array_${bh_ctype}_p GetArrayPointer()
        {
            if (!m_array.IsAllocated)
            {
                lock(PinnedArrayTracker.ExecuteLock)
                {
                    m_array = PInvoke.bh_multi_array_${bh_ctype}_new_empty(1, new long[] { m_size });
                    if (m_data == null)
                    {
                        //Console.WriteLine("Creating data in C land");

                        // No CIL allocation, create a new multi-array
                        m_dirty = true;
                    }
                    else
                    {
                        //Console.WriteLine("Wraping CIL data");

                        // Existing CIL allocation, wrap it
                        m_array.Data = PinnedArrayTracker.CreatePinnedArray(m_data);
                    }
                }
            }

            return m_array;
        }

        public void Flush()
        {
            Sync();
        }

        private void Sync()
        {
            if (m_dirty)
            {
                // Console.WriteLine("Calling sync");
                if (!m_array.IsAllocated)
                    throw new InvalidOperationException("Array cannot be dirty and not allocated");

                m_array.Sync();
                PinnedArrayTracker.Release();
                m_dirty = false;
            }
        }

        public void Allocate()
        {
            Sync();

            if (m_array.IsAllocated)
            {
                if (m_data == null)
                {
                    //Console.WriteLine("Copy data from C land");

                    //In this case, data resides in C land, 
                    // so we copy it back to CIL and free it in C land
                    m_data = new ${bh_atype}[m_size];
                    var ptr = m_array.Data;
                    
                    if (ptr != IntPtr.Zero) 
                        Utility.WritePointerToArray(ptr, m_data);
                    else
                        Console.WriteLine("Array appears to be uninitialized ....");

                    m_array.Dispose();
                }
                else
                {
                    //Data resides in CIL so detach the data and release the array
                    //Console.WriteLine("Release data in C land");

                    m_array.Data = IntPtr.Zero;
                    m_array.Dispose();
                }
            }
            else
            {
                //Console.WriteLine("Accessed array that was never in any operation");
                if (m_data == null)
                    m_data = new ${bh_atype}[m_size];
            }
        }

        public long Length
        {
            get
            {
                return m_size;
            }
        }

        public bool IsAllocated
        {
            get
            {
                return m_data != null;
            }
        }

        public ${bh_atype} this[long index]
        {
            get
            {
                Sync();

                if (m_data == null && m_array.IsAllocated && index < MAX_INDEX)
                {
                    if (index < 0 || index >= m_size)
                        throw new ArgumentOutOfRangeException("index");

                    //Console.WriteLine("In get, using pointer");

                    //Console.WriteLine("array is {0}", m_array.AsString());

                    var ptr = m_array.Data;
                    if (ptr == IntPtr.Zero)
                        throw new InvalidOperationException("The data pointer was null");

                    var tmp = new ${bh_atype}[1];
                    Utility.WritePointerToArray(ptr + (int)(index * ELSIZE), tmp);
                    return tmp[0];
                }

                if (m_data == null)
                    Allocate();
                                
                //Console.WriteLine("In get, using local data");
                return m_data[index];
            }
            set
            {
                Sync();

                if (m_data == null && m_array.IsAllocated && index < MAX_INDEX)
                {
                    if (index < 0 || index >= m_size)
                        throw new ArgumentOutOfRangeException("index");

                    var ptr = m_array.Data;
                    if (ptr == IntPtr.Zero)
                        throw new InvalidOperationException("The data pointer was null");

                    var tmp = new ${bh_atype}[] { value };
                    Utility.WriteArrayToPointer(tmp, ptr + (int)(index * ELSIZE));
                    return;
                }
                    
                if (m_data == null)
                    Allocate();

                m_data[index] = value;
            }
        }

        public object Tag { get; set; }


        #endregion

        /// <summary>
        /// Releases the memory reserved by the pointer
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
        }

        /// <summary>
        /// Releases the memory reserved by the pointer
        /// </summary>
        ~DataAccessor_${bh_ctype}()
        {
            Dispose(false);
        }

        /// <summary>
        /// Releases the memory reserved by the pointer
        /// </summary>
        private void Dispose(bool disposing)
        {
            if (disposing)
                GC.SuppressFinalize(this);

            if (m_array.IsAllocated)
                m_array.Dispose();
        }
    }    
    %end for
}