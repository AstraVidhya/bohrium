#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
%include "codegen/templates/warn.txt"
%include "codegen/templates/license.txt"

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using NumCIL.Generic;

%include "codegen/templates/typemap.cs"

%set $ops = $data[0]
%set $reduce_ops = $data[1]
%set $methods = $data[2]

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
using ma_${bh_ctype} = NumCIL.Bohrium2.PInvoke.bh_multi_array_${bh_ctype}_p;
%end for

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
namespace NumCIL.Bohrium2
{
    public class ApplyImplementor_${bh_ctype} : ITypedApplyImplementor<${bh_atype}>
    {
        private Tuple<Type, Func<ma_${bh_ctype}, ma_${bh_ctype}>>[] m_unOps = 
        {
%for $op, $opcode, $opname, $opcount, $inplace, $typesigs, $cilname in $methods
%if $opcode != "BH_IDENTITY" and opcount == 2 and $cilname != ""
%for $op1_type, $op2_type in $typesigs
%if op1_type[2] == $bh_ctype and op2_type[2] == $bh_ctype
            new Tuple<Type, Func<ma_${bh_ctype}, ma_${bh_ctype}>>(typeof(${cilname}), PInvoke.bh_multi_array_${bh_ctype}_${opname}),
%end if
%end for
%end if
%end for
        };
        
        private Tuple<Type, Func<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}>>[] m_binOps = 
        {
%for $op, $opcode, $opname, $opcount, $inplace, $typesigs, $cilname in $methods
%if $opcode != "BH_IDENTITY" and opcount == 3 and $cilname != ""
%for $op1_type, $op2_type, $op3_type in $typesigs
%if op1_type[2] == $bh_ctype and op2_type[2] == $bh_ctype and op3_type[2] == $bh_ctype
            new Tuple<Type, Func<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}>>(typeof(${cilname}), PInvoke.bh_multi_array_${bh_ctype}_${opname}),
%end if
%end for
%end if
%end for
        };

        private Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>[] m_aggOps = 
        {
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IAdd), PInvoke.bh_multi_array_${bh_ctype}_sum),
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IMul), PInvoke.bh_multi_array_${bh_ctype}_product),
%if $bh_ctype != "complex64" and $bh_ctype != "complex128"
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IMax), PInvoke.bh_multi_array_${bh_ctype}_max),
            new Tuple<Type, Func<ma_${bh_ctype}, ${bh_atype}>>(typeof(NumCIL.Generic.Operators.IMin), PInvoke.bh_multi_array_${bh_ctype}_min)
%end if
        };

        private Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>[] m_reduceOps = 
        {
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IAdd), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_add),
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IMul), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_multiply),
%if $bh_ctype != "complex64" and $bh_ctype != "complex128"
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IMin), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_min),
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IMax), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_max),
            
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IAnd), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_bitwise_and),
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IOr), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_bitwise_or),
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IXor), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_bitwise_xor),
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IAnd), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_logical_and),
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IOr), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_logical_or),
            new Tuple<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>(typeof(NumCIL.Generic.Operators.IXor), PInvoke.bh_multi_array_${bh_ctype}_partial_reduce_logical_xor),
%end if
        };        

%if $bh_ctype == "bool8"
%for $ctype2, $bh_atype2, $bh_ctype2, $bh_enum2 in $ops
        private Dictionary<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>> m_compareLookup_${bh_ctype2} = new Dictionary<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>>();
        private Tuple<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>>[] m_compareOps_${bh_ctype2} =
        {
%if $bh_ctype2 != "complex64" and $bh_ctype2 != "complex128"
            new Tuple<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>>(typeof(NumCIL.Generic.Operators.IEqual), PInvoke.bh_multi_array_${bh_ctype2}_equal_to),
            new Tuple<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>>(typeof(NumCIL.Generic.Operators.INotEqual), PInvoke.bh_multi_array_${bh_ctype2}_not_equal_to),
%if $bh_ctype2  != "bool8"
            new Tuple<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>>(typeof(NumCIL.Generic.Operators.ILessThan), PInvoke.bh_multi_array_${bh_ctype2}_less_than),
            new Tuple<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>>(typeof(NumCIL.Generic.Operators.IGreaterThan), PInvoke.bh_multi_array_${bh_ctype2}_greater_than),
            new Tuple<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>>(typeof(NumCIL.Generic.Operators.ILessThanOrEqual), PInvoke.bh_multi_array_${bh_ctype2}_less_than_or_equal_to),
            new Tuple<Type, Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8>>(typeof(NumCIL.Generic.Operators.IGreaterThanOrEqual), PInvoke.bh_multi_array_${bh_ctype2}_greater_than_or_equal_to),
%end if
%end if
        };

%end for
%end if
        
        private Dictionary<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>> m_reduceLookup = new Dictionary<Type, Func<ma_${bh_ctype}, long, ma_${bh_ctype}>>();
        private Dictionary<Type, Func<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}>> m_binOpLookup = new Dictionary<Type, Func<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}>>();
        private Dictionary<Type, Func<ma_${bh_ctype}, ma_${bh_ctype}>> m_unOpLookup = new Dictionary<Type, Func<ma_${bh_ctype}, ma_${bh_ctype}>>();
        private Dictionary<Type, Func<ma_${bh_ctype}, ${bh_atype}>> m_aggLookup = new Dictionary<Type, Func<ma_${bh_ctype}, ${bh_atype}>>();

        #region ITypedApplyImplementor implementation

        public bool ApplyBinaryOp(Type c, NdArray<${bh_atype}> in1, NdArray<${bh_atype}> in2, NdArray<${bh_atype}> @out)
        {
            Func<ma_${bh_ctype}, ma_${bh_ctype}, ma_${bh_ctype}> m;
            // This lookup prevents a linear scan of the supported operands
            if (!m_binOpLookup.TryGetValue(c, out m))
            {
                m = (from n in m_binOps
                                    where n.Item1.IsAssignableFrom(c)
                                    select n.Item2).FirstOrDefault();
                m_binOpLookup[c] = m;
            }
        
            if (m == null)
            {
                Console.WriteLine("No registered match for: {0}", c.FullName);
                return false;
            }
                
            // If the accessor is CIL-managed, we register a GC handle for the array
            // If the input is used, no special action is performed until 
            // a sync is executed, then all the BH queue is flushed and 
            // the GC handles released
                        
            using (var v1 = new PInvoke.bh_multi_array_${bh_ctype}_p(@in1))
            using (var v2 = new PInvoke.bh_multi_array_${bh_ctype}_p(@in2))
            using (var v0 = new PInvoke.bh_multi_array_${bh_ctype}_p(@out))
            {
                PInvoke.bh_multi_array_${bh_ctype}_assign_array(v0, m(v1, v2));
                // If the output is CIL-managed, we must sync immediately
                if (@out.DataAccessor is DataAccessor_${bh_ctype})
                {
                    ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                }
                else
                {
                    v0.Sync();
                    PinnedArrayTracker.Release();
                }
            }

            return true;
        }

        public bool ApplyBinaryConvOp<Ta>(Type c, NdArray<Ta> in1, NdArray<Ta> in2, NdArray<${bh_atype}> @out)
        {
%if $bh_ctype == "bool8"
%for $ctype2, $bh_atype2, $bh_ctype2, $bh_enum2 in $ops
            if (typeof(Ta) == typeof($bh_atype2))
            {
                Func<ma_${bh_ctype2}, ma_${bh_ctype2}, ma_bool8> m;
                if (!m_compareLookup_${bh_ctype2}.TryGetValue(c, out m))
                {
                    m = (from n in m_compareOps_${bh_ctype2}
                                        where n.Item1.IsAssignableFrom(c)
                                        select n.Item2).FirstOrDefault();
                    m_compareLookup_${bh_ctype2}[c] = m;
                }
            
                if (m == null)
                {
                    Console.WriteLine("No registered match for: {0}", c.FullName);
                    return false;
                }

                using (var v1 = new PInvoke.bh_multi_array_${bh_ctype2}_p((NdArray<${bh_atype2}>)(object)@in1))
                using (var v2 = new PInvoke.bh_multi_array_${bh_ctype2}_p((NdArray<${bh_atype2}>)(object)@in2))
                using (var v0 = new PInvoke.bh_multi_array_${bh_ctype}_p(@out))
                {
                    PInvoke.bh_multi_array_${bh_ctype}_assign_array(v0, m(v1, v2));
                    // If the output is CIL-managed, we must sync immediately
                    if (@out.DataAccessor is DataAccessor_${bh_ctype})
                    {
                        ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                    }
                    else
                    {
                        v0.Sync();
                        PinnedArrayTracker.Release();
                    }
                }

                return true;
            }
%end for
%end if
            return false;
        }

        public bool ApplyUnaryOp(Type c, NdArray<${bh_atype}> in1, NdArray<${bh_atype}> @out)
        {
            var isScalarIn1 = @in1.DataAccessor.GetType() == typeof(DefaultAccessor<${bh_atype}>) && @in1.DataAccessor.Length == 1;
            
            Action<NdArray<${bh_atype}>, NdArray<${bh_atype}>> exec = null;
            
            // Special handling of the copy operator as it happens "in-place" (kind-of)
            if (typeof(NumCIL.Generic.Operators.ICopyOperation).IsAssignableFrom(c))
            {
                exec = (_in, _out) =>
                {
                    if (isScalarIn1)
                        using (var v2 = new PInvoke.bh_multi_array_${bh_ctype}_p(_out))
                        {                                
                            PInvoke.bh_multi_array_${bh_ctype}_assign_scalar(v2, _in.DataAccessor[0]);
                            if (!(_out.DataAccessor is DataAccessor_${bh_ctype}))
                                v2.Sync();
                        }
                    else
                        using (var v1 = new PInvoke.bh_multi_array_${bh_ctype}_p(_in))
                        using (var v2 = new PInvoke.bh_multi_array_${bh_ctype}_p(_out))
                        {
                            PInvoke.bh_multi_array_${bh_ctype}_assign_array(v2, v1);
                            if (!(_out.DataAccessor is DataAccessor_${bh_ctype}))
                                v2.Sync();

                        }
                };
            }
                    
            if (exec == null)
            {
                Func<ma_${bh_ctype}, ma_${bh_ctype}> m;
            
                // This lookup prevents a linear scan of the supported operands
                if (!m_unOpLookup.TryGetValue(c, out m))
                {
                    m = (from n in m_unOps
                            where n.Item1.IsAssignableFrom(c)
                            select n.Item2).FirstOrDefault();
                    m_unOpLookup[c] = m;
                }
                
                if (m != null)
                {
                    exec = (_in, _out) =>
                    {
                        using (var v1 = new PInvoke.bh_multi_array_${bh_ctype}_p(_in))
                        using (var v0 = new PInvoke.bh_multi_array_${bh_ctype}_p(_out))
                        {
                            PInvoke.bh_multi_array_${bh_ctype}_assign_array(v0, m(v1));
                            if (!(_out.DataAccessor is DataAccessor_${bh_ctype}))
                                v0.Sync();
                        }
                    };
                }
            }
            
            if (exec == null)
            {
                Console.WriteLine("No registered match for: {0}", c.FullName);
                return false;
            }
            
            exec(@in1, @out);
            
            if (@out.DataAccessor is DataAccessor_${bh_ctype})
                ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
            else
                PinnedArrayTracker.Release();
            
            return true;
        }

        private bool DoConvert<T>(NdArray<${bh_atype}> @out, Func<T> constructor, Func<T, ma_${bh_ctype}> converter)
            where T : IDisposable
        {
            using (var v0 = new PInvoke.bh_multi_array_${bh_ctype}_p(@out))
            using (var v1 = constructor())
            {
                PInvoke.bh_multi_array_${bh_ctype}_assign_array(v0, converter(v1));
                if (@out.DataAccessor is DataAccessor_${bh_ctype})
                {
                    ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                }
                else
                {
                    v0.Sync();
                    PinnedArrayTracker.Release();
                }
            }
            
            return true;
        }

        public bool ApplyUnaryConvOp<Ta>(Type c, NdArray<Ta> in1, NdArray<${bh_atype}> @out)
        {
            if (typeof(NumCIL.Generic.Operators.ITypeConversion).IsAssignableFrom(c))
            {
                if (typeof(Ta) == typeof(${bh_atype}))
                    return ApplyUnaryOp(c, (NdArray<${bh_atype}>)(object)in1, @out);
%for $op, $opcode, $opname, $opcount, $inplace, $typesigs, $cilname in $methods
%if $opcode == "BH_IDENTITY" and opcount == 2
%for $op1_type, $op2_type in $typesigs
%if op1_type[2] == $bh_ctype and op2_type[2] != $bh_ctype
                else if (typeof(Ta) == typeof(${op2_type[1]}))
                    return DoConvert(@out, 
                        () => new PInvoke.bh_multi_array_${op2_type[2]}_p((NdArray<${op2_type[1]}>)(object)in1),
                        PInvoke.bh_multi_array_${bh_ctype}_convert_${op2_type[2]});
%end if
%end for
%end if
%end for
            }
%if $bh_ctype == "float32"
            else if (typeof(NumCIL.Generic.Operators.IRealValue).IsAssignableFrom(c) && (typeof(Ta) == typeof(NumCIL.Complex64.DataType)))
                return DoConvert(@out, 
                    () => new PInvoke.bh_multi_array_complex64_p((NdArray<NumCIL.Complex64.DataType>)(object)in1),
                    PInvoke.bh_multi_array_complex64_real);
            else if (typeof(NumCIL.Generic.Operators.IImaginaryValue).IsAssignableFrom(c) && (typeof(Ta) == typeof(NumCIL.Complex64.DataType)))
                return DoConvert(@out, 
                    () => new PInvoke.bh_multi_array_complex64_p((NdArray<NumCIL.Complex64.DataType>)(object)in1),
                    PInvoke.bh_multi_array_complex64_imag);
%end if
%if $bh_ctype == "float64"
            else if (typeof(NumCIL.Generic.Operators.IRealValue).IsAssignableFrom(c) && (typeof(Ta) == typeof(System.Numerics.Complex)))
                return DoConvert(@out, 
                    () => new PInvoke.bh_multi_array_complex128_p((NdArray<System.Numerics.Complex>)(object)in1),
                    PInvoke.bh_multi_array_complex128_real);
            else if (typeof(NumCIL.Generic.Operators.IImaginaryValue).IsAssignableFrom(c) && (typeof(Ta) == typeof(System.Numerics.Complex)))
                return DoConvert(@out, 
                    () => new PInvoke.bh_multi_array_complex128_p((NdArray<System.Numerics.Complex>)(object)in1),
                    PInvoke.bh_multi_array_complex128_imag);
%end if

            return false;
        }

        public bool ApplyNullaryOp(Type c, NdArray<${bh_atype}> @out)
        {
            return false;
        }

        public bool ApplyReduce(Type c, long axis, NdArray<${bh_atype}> in1, NdArray<${bh_atype}> @out)
        {
            Func<ma_${bh_ctype}, long, ma_${bh_ctype}> m;
            if (!m_reduceLookup.TryGetValue(c, out m))
            {
                m = (from n in m_reduceOps
                                 where n.Item1.IsAssignableFrom(c)
                                 select n.Item2).FirstOrDefault();
                m_reduceLookup[c] = m;
            }
            
            if (m == null)
            {
                Console.WriteLine("No registered match for reduce: {0}: {1}", c.FullName, in1.DataAccessor.GetType().FullName);
                return false;
            }
            
            using (var v1 = new PInvoke.bh_multi_array_${bh_ctype}_p(@in1))
            using (var v0 = new PInvoke.bh_multi_array_${bh_ctype}_p(@out))
            {
                PInvoke.bh_multi_array_${bh_ctype}_assign_array(v0, m(v1, axis));
                if (@out.DataAccessor is DataAccessor_${bh_ctype})
                {
                    ((DataAccessor_${bh_ctype})@out.DataAccessor).SetDirty();
                }
                else
                {
                    v0.Sync();
                    PinnedArrayTracker.Release();
                }
            }

            return true;
        }

        public bool ApplyMatmul(Type cadd, Type cmul, NdArray<${bh_atype}> in1, NdArray<${bh_atype}> in2, NdArray<${bh_atype}> @out = null)
        {
            return false;
        }

        public bool ApplyAggregate(Type c, NdArray<${bh_atype}> in1, out ${bh_atype} result)
        {
            Func<ma_${bh_ctype}, ${bh_atype}> m;
            if (!m_aggLookup.TryGetValue(c, out m))
            {
                m = (from n in m_aggOps
                                 where n.Item1.IsAssignableFrom(c)
                                 select n.Item2).FirstOrDefault();
                m_aggLookup[c] = m;
            }
            
            if (m == null)
            {
                //TODO: Attempt to build one using multiple partial reductions ...
            }
             
            if (m == null)
            {
                Console.WriteLine("No registered match for aggregate: {0}: {1}", c.FullName, in1.DataAccessor.GetType().FullName);
                result = default(${bh_atype});
                return false;
            }

            using(var v0 = new PInvoke.bh_multi_array_${bh_ctype}_p(in1))
                result = m(v0);

            return true;
        }

        #endregion
    }       
}

%end for