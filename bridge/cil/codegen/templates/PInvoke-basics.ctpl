#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
%include "codegen/templates/warn.txt"
%include "codegen/templates/license.txt"

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;

%include "codegen/templates/typemap.cs"

%set $ops = $data[0]
%set $reduce_ops = $data[1]

namespace NumCIL.Bohrium
{

    /// <summary>
    /// Interface for simple untyped handling of typed bh_multi_arrays
    /// </summary>
    internal interface IMultiArray : IDisposable
    {
        /// <summary>
        /// Sets the data ptr for the view
        /// </summary>
        /// <param name="dataPtr">The new data ptr</param>
        void SetData(IntPtr dataPtr);
    }

    /// <summary>
    /// Container class for all functions related to the Bohrium C API
    /// </summary>
    internal static partial class PInvoke 
    {
        %for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops

        /// <summary>
        /// The multi-array instance
        /// </summary>
        public struct bh_multi_array_${bh_ctype}_p : IMultiArray
        {
            /// <summary>
            /// The internal pointer instance
            /// </summary>
            private IntPtr pointer;

            /// <summary>
            /// Gets the underlying multi array pointer
            /// </summary>
            public IntPtr Pointer { get { return pointer; } }

            /// <summary>
            /// Constructs a multi_array from an IntPtr
            /// </summary>
            public bh_multi_array_${bh_ctype}_p(IntPtr value) { pointer = value; }

            /// <summary>
            /// Checks if the array is allocated, i.e. not null
            /// </summary>
            public bool IsAllocated { get { return pointer != IntPtr.Zero; } }

            /// <summary>
            /// Gets or sets the array temp status
            /// </summary>
            public bool Temp
            {
                get { lock(PinnedArrayTracker.ExecuteLock) { return IsAllocated ? bh_multi_array_${bh_ctype}_get_temp(this) : false; } }
                set { lock(PinnedArrayTracker.ExecuteLock)
 bh_multi_array_${bh_ctype}_set_temp(this, value); }
            }

            /// <summary>
            /// Creates a new view
            /// </summary>
            public bh_multi_array_${bh_ctype}_p (NumCIL.Generic.NdArray<${bh_atype}> a)
            {
                var ac = a.DataAccessor;
                lock(PinnedArrayTracker.ExecuteLock)
                {
                    if (ac is DataAccessor_${bh_ctype}) {
                        var acp = ((DataAccessor_${bh_ctype})a.DataAccessor).GetArrayPointer();
        

                        this.pointer = bh_multi_array_${bh_ctype}_new_view(
                            acp,
                            (ulong)a.Shape.Dimensions.Length, 
                            a.Shape.Offset, 
                            a.Shape.Dimensions.Select(x => x.Length).ToArray(),
                            a.Shape.Dimensions.Select(x => x.Stride).ToArray()
                        ).pointer;
                    } else {
                        using(var acp = bh_multi_array_${bh_ctype}_new_empty(1, new long[] { a.DataAccessor.Length }))
                        {
                            ((IMultiArray)acp).SetData(PinnedArrayTracker.CreatePinnedArray(a.DataAccessor.AsArray()));
                            this.pointer = bh_multi_array_${bh_ctype}_new_view(
                                acp,
                                (ulong)a.Shape.Dimensions.Length, 
                                a.Shape.Offset, 
                                a.Shape.Dimensions.Select(x => x.Length).ToArray(),
                                a.Shape.Dimensions.Select(x => x.Stride).ToArray()
                            ).pointer;
                        }

                    }

                    //Console.WriteLine("Created multi_array from NdArray: {0}", this.pointer.ToInt64());
                }
            }

            /// <summary>
            /// Releases the memory reserved by the pointer
            /// </summary>
            public void Dispose()
            {
                try 
                { 
                    if (IsAllocated)
                    {
                        //Console.WriteLine("Destroying multi_array {0}", this.pointer.ToInt64());

                        var data = this.Data;
                        if (PinnedArrayTracker.IsManagedData(data))
                        {
                            lock(PinnedArrayTracker.ExecuteLock)
                                bh_multi_array_${bh_ctype}_set_external(this, true);

                            PinnedArrayTracker.DecReference(data);
                        }

                        lock(PinnedArrayTracker.ExecuteLock)
                            bh_multi_array_${bh_ctype}_destroy(this);
                    }
                }
                finally 
                { 
                    pointer = IntPtr.Zero; 
                }
            }

            /// <summary>
            /// Issues a synchronization for the underlying data
            /// </summary>
            public void Sync()
            {
                lock(PinnedArrayTracker.ExecuteLock)
                    bh_multi_array_${bh_ctype}_sync(this);
            }

            /// <summary>
            /// Returns the multi_array as a string
            /// </summary>
            public string AsString()
            {
                var s = pointer.ToInt64();
                return string.Format("self: {0} (d: {1})", s, this.Data.ToInt64());
            }

            /// <summary>
            /// Sets the data pointer
            /// </summary>
            void IMultiArray.SetData(IntPtr dataPtr)
            {
                this.Data = dataPtr;
            }

            /// <summary>
            /// Gets the size of the backing array
            /// </summary>
            public long DataSize { get { return bh_multi_array_${bh_ctype}_get_data_nelem(this); } }

            /// <summary>
            /// Gets the broadcasted view size
            /// </summary>
            public ulong ViewSize { get { return bh_multi_array_${bh_ctype}_get_length(this); } }

            /// <summary>
            /// Gets or sets the data pointer
            /// </summary>
            public IntPtr Data 
            { 
                get { lock(PinnedArrayTracker.ExecuteLock) return bh_multi_array_${bh_ctype}_get_data(this); } 
                set 
                { 
                    var prevPtr = this.Data;
                    if (prevPtr != value)
                    {
                        PinnedArrayTracker.DecReference(prevPtr);
                        PinnedArrayTracker.IncReference(value);
                        lock(PinnedArrayTracker.ExecuteLock)
                        {
                            bh_multi_array_${bh_ctype}_set_data(this, value); 
                            if (PinnedArrayTracker.IsManagedData(value))
                                bh_multi_array_${bh_ctype}_set_external(this, true);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Marks the data as externally allocated
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_set_external([In] bh_multi_array_${bh_ctype}_p self, bh_bool value);

        /// <summary>
        /// Returns true if the data is externally managed, false otherwise
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_bool bh_multi_array_${bh_ctype}_get_external([In] bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Gets the data pointer from a view
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static IntPtr bh_multi_array_${bh_ctype}_get_data([In] bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Gets the number of elements in a view
        /// </summary>        
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static int64_t bh_multi_array_${bh_ctype}_get_data_nelem([In] bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Sets the data pointer for a view
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_set_data(bh_multi_array_${bh_ctype}_p self, IntPtr data);

        /// <summary>
        /// Sets the temp status of an array
        /// </summary>        
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_set_temp([In] bh_multi_array_${bh_ctype}_p self, bh_bool temp);

        /// <summary>
        /// Sets the temp status of an array
        /// </summary>        
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_bool bh_multi_array_${bh_ctype}_get_temp([In] bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Construct a new array from existing view 
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_view([In] bh_multi_array_${bh_ctype}_p source, uint64_t rank, [In] int64_t start, [In] int64_t[] shape, [In] int64_t[] stride);

        /// <summary>
        /// Construct a new empty array
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_empty(uint64_t rank, [In] int64_t[] shape);

        /// <summary>
        /// Construct a new zero-filled array
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_zeroes(uint64_t rank, [In] int64_t[] shape);

        /// <summary>
        /// Construct a new one-filled array
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_ones(uint64_t rank, [In] int64_t[] shape);

        /// <summary>
        /// Construct a new array with sequential numbers
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_range([In] uint64_t size);

        /// <summary>
        /// Construct a new array, filled with the specified value
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_value([In] ${bh_atype} value, uint64_t rank, [In] int64_t[] shape);

        /// <summary>
        /// Synchronizes the current data
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_sync([In] bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Construct a copy of the array
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_copy(bh_multi_array_${bh_ctype}_p other);

        /// <summary>
        /// Destroy the pointer and release resources
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_destroy(bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Gets the number of elements in the array
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static uint64_t bh_multi_array_${bh_ctype}_get_length(bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Gets the number of dimensions in the array
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static uint64_t bh_multi_array_${bh_ctype}_get_rank(bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Gets the number of elements in the dimension
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static uint64_t bh_multi_array_${bh_ctype}_get_dimension_size(bh_multi_array_${bh_ctype}_p self, [In] int64_t dimension);

        /// <summary>
        /// Update with a scalar
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_identity_${bh_ctype}_scalar(bh_multi_array_${bh_ctype}_p self, [In] ${bh_atype} value);

        /// <summary>
        /// Flatten view
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_flatten(bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Transpose view
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_transpose(bh_multi_array_${bh_ctype}_p self);

        %for $opname, $enum in $reduce_ops
        /// <summary>
        /// Partial ${opname} reduction 
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_${opname}_reduce(bh_multi_array_${bh_ctype}_p @out, bh_multi_array_${bh_ctype}_p self, [In] int64_t axis);

        %end for

%if $bh_atype == "bh_complex64"

        /// <summary>
        /// Get the real component of a complex number
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_real(bh_multi_array_float32_p @out, bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Get the imaginary component of a complex number
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_imag(bh_multi_array_float32_p @out, bh_multi_array_${bh_ctype}_p self);

%end if

%if $bh_atype == "bh_complex128"

        /// <summary>
        /// Get the real component of a complex number
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_real(bh_multi_array_float64_p @out, bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Get the imaginary component of a complex number
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static void bh_multi_array_${bh_ctype}_imag(bh_multi_array_float64_p @out, bh_multi_array_${bh_ctype}_p self);

%end if
%if $bh_atype == "bh_uint64"
        /// <summary>
        /// Construct a new random-filled array using Random123
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_random123(bh_uint64 length, bh_uint64 start, bh_uint64 key);

%end if


%if $bh_atype == "bh_bool8"
        /// <summary>
        /// Returns the combined logical AND for all values
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_bool bh_multi_array_bool8_all(bh_multi_array_bool8_p self);

        /// <summary>
        /// Returns the combined logical OR for all values
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static bh_bool bh_multi_array_bool8_any(bh_multi_array_bool8_p self);
%else
        /// <summary>
        /// Returns the sum of all values
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static $bh_atype bh_multi_array_${bh_ctype}_sum(bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Returns the product of all values
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static $bh_atype bh_multi_array_${bh_ctype}_product(bh_multi_array_${bh_ctype}_p self);

%if $bh_atype != "bh_complex128" and $bh_atype != "bh_complex64"

        /// <summary>
        /// Returns the largest of the values
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static $bh_atype bh_multi_array_${bh_ctype}_max(bh_multi_array_${bh_ctype}_p self);

        /// <summary>
        /// Returns the smallest of the values
        /// </summary>
        [DllImport("libbhc", SetLastError = true, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto)]
        public extern static $bh_atype bh_multi_array_${bh_ctype}_min(bh_multi_array_${bh_ctype}_p self);
%end if

%end if

%end for
    }
}