#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp

#ifndef __BH_C_DATA_TYPES_H
#define __BH_C_DATA_TYPES_H

#include <stdint.h>
#include "bh_type.h"

#ifdef _WIN32
#define DLLEXPORT __declspec( dllexport )
#else
#define DLLEXPORT
#endif

#ifdef __cplusplus
extern "C" {
#endif

// Common runtime methods
DLLEXPORT void bh_runtime_flush(void);

// Shutdown Bohrium
DLLEXPORT void bh_runtime_shutdown(void);

// Common slice range
struct bh_slice_range;
typedef struct bh_slice_range* bh_slice_range_p;

// Common type forward definition
#ifndef __BH_ARRAY_H
struct bh_base;
struct bh_view;
typedef struct bh_base* bh_base_p;
typedef struct bh_view* bh_view_p;
#else
typedef bh_base* bh_base_p;
typedef bh_view* bh_view_p;
#endif

%set $ops = $data

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops

// Forward definitions
struct bh_multi_array_${bh_ctype};
struct bh_slice_${bh_ctype};

// Shorthand pointer defs
typedef struct bh_multi_array_${bh_ctype}* bh_multi_array_${bh_ctype}_p;
typedef struct bh_slice_range_${bh_ctype}* bh_slice_range_${bh_ctype}_p;

// Marks the data as externally allocated
DLLEXPORT void bh_multi_array_${bh_ctype}_set_external(const bh_multi_array_${bh_ctype}_p self, bh_bool value);

// Returns true if the data is externally managed, false otherwise
DLLEXPORT bh_bool bh_multi_array_${bh_ctype}_get_external(const bh_multi_array_${bh_ctype}_p self);

// Gets the data pointer from a view
DLLEXPORT ${bh_atype}* bh_multi_array_${bh_ctype}_get_data(const bh_multi_array_${bh_ctype}_p self);

// Gets the data pointer from a view and force memory allocation
// Return NULL when out of memory
DLLEXPORT ${bh_atype}* bh_multi_array_${bh_ctype}_get_data_and_force_alloc(const bh_multi_array_${bh_ctype}_p self);

// Gets the number of elements in the underlying data
DLLEXPORT int64_t bh_multi_array_${bh_ctype}_get_data_nelem(const bh_multi_array_${bh_ctype}_p self);

// Sets the data pointer for a view
DLLEXPORT void bh_multi_array_${bh_ctype}_set_data(bh_multi_array_${bh_ctype}_p self, ${bh_atype}* data);

// Nullify the data pointer for a view
DLLEXPORT void bh_multi_array_${bh_ctype}_nullify_data(bh_multi_array_${bh_ctype}_p self);

// Sync the current view
DLLEXPORT void bh_multi_array_${bh_ctype}_sync(const bh_multi_array_${bh_ctype}_p self);

// Discard the current view
DLLEXPORT void bh_multi_array_${bh_ctype}_discard(const bh_multi_array_${bh_ctype}_p self);

// Sets the temp status of an array
DLLEXPORT void bh_multi_array_${bh_ctype}_set_temp(const bh_multi_array_${bh_ctype}_p self, bh_bool temp);

// Gets the temp status of an array
DLLEXPORT bh_bool bh_multi_array_${bh_ctype}_get_temp(const bh_multi_array_${bh_ctype}_p self);

// Construct a new array from an existing view
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_view(const bh_multi_array_${bh_ctype}_p source, uint64_t rank, const int64_t start, const int64_t* shape, const int64_t* stride);

// Construct a new empty array
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_empty(uint64_t rank, const int64_t* shape);

%if $bh_ctype != "bool8"
// Construct a new zero-filled array
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_zeroes(uint64_t rank, const int64_t* shape);

// Construct a new one-filled array
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_ones(uint64_t rank, const int64_t* shape);
%end if

%if $bh_ctype == "uint64" or $bh_ctype == "uint32"
// Construct a new array with sequential numbers
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_range(uint64_t size);
%end if

%if $bh_ctype == "uint64"
// Construct a new random-filled array using Random123
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_random123(uint64_t length, uint64_t start, uint64_t key);
%end if

// Construct a new array, filled with the specified value
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_value(const ${bh_atype} value, uint64_t rank, const int64_t* shape);

// Construct a copy of the array
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_copy(bh_multi_array_${bh_ctype}_p other);

// Destroy the pointer and release resources
DLLEXPORT void bh_multi_array_${bh_ctype}_destroy(bh_multi_array_${bh_ctype}_p self);

// Gets the number of elements in the array
DLLEXPORT uint64_t bh_multi_array_${bh_ctype}_get_length(bh_multi_array_${bh_ctype}_p self);

// Gets the number of dimensions in the array
DLLEXPORT uint64_t bh_multi_array_${bh_ctype}_get_rank(bh_multi_array_${bh_ctype}_p self);

// Gets the number of elements in the dimension
DLLEXPORT uint64_t bh_multi_array_${bh_ctype}_get_dimension_size(bh_multi_array_${bh_ctype}_p self, const int64_t dimension);

// Update with an data
DLLEXPORT void bh_multi_array_${bh_ctype}_assign_data(bh_multi_array_${bh_ctype}_p self, const void* data);

// Flatten view
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_flatten(bh_multi_array_${bh_ctype}_p self);

// Transpose view
DLLEXPORT bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_transpose(bh_multi_array_${bh_ctype}_p self);

%if $bh_atype == "bh_bool"

// All
DLLEXPORT ${bh_atype} bh_multi_array_${bh_ctype}_all(bh_multi_array_${bh_ctype}_p self);

// Any
DLLEXPORT ${bh_atype} bh_multi_array_${bh_ctype}_any(bh_multi_array_${bh_ctype}_p self);
%else

// Sum
DLLEXPORT ${bh_atype} bh_multi_array_${bh_ctype}_sum(bh_multi_array_${bh_ctype}_p self);

// Product
DLLEXPORT ${bh_atype} bh_multi_array_${bh_ctype}_product(bh_multi_array_${bh_ctype}_p self);

%end if

%if $bh_ctype != "complex64" and $bh_ctype != "complex128"
// Max
DLLEXPORT ${bh_atype} bh_multi_array_${bh_ctype}_max(bh_multi_array_${bh_ctype}_p self);

// Min
DLLEXPORT ${bh_atype} bh_multi_array_${bh_ctype}_min(bh_multi_array_${bh_ctype}_p self);

%end if

%end for

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops
    %for $ctype2, $bh_atype2, $bh_ctype2, $bh_enum2 in $ops
        %for $ctype3, $bh_atype3, $bh_ctype3, $bh_enum3 in $ops
            %if $bh_ctype2 == $bh_ctype3

//Register an extension method, return 0 on success and -1 when the method isn't supported
DLLEXPORT int bh_multi_array_extmethod_${bh_ctype}_${bh_ctype2}_${bh_ctype3}(const char *name, bh_multi_array_${bh_ctype}_p out, bh_multi_array_${bh_ctype2}_p in1, bh_multi_array_${bh_ctype3}_p in2);

            %end if
        %end for
    %end for
%end for

#ifdef __cplusplus
}
#endif

#endif
