#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings

#ifndef __BH_C_INTERFACE_H
#define __BH_C_INTERFACE_H

#include <stdint.h>
#include <bh_type.h>

#ifdef _WIN32
#define DLLEXPORT __declspec( dllexport )
#else
#define DLLEXPORT
#endif

%slurp
#ifdef __cplusplus
extern "C" {
#endif

%set $elementwise = $data[0]
%set $reduction = $data[1]
%set $accumulate = $data[2]

// Copy methods

%for $op, $opcode, $opname, $opcount, $typesigs in $elementwise
%if $opcode == "BH_IDENTITY"
%for $op1_type, $op2_type in $typesigs
DLLEXPORT void bh_multi_array_${op1_type[2]}_identity_${op2_type[2]}(bh_multi_array_${op1_type[2]}_p out,
                                                const bh_multi_array_${op2_type[2]}_p rhs);

DLLEXPORT void bh_multi_array_${op1_type[2]}_identity_${op2_type[2]}_scalar(bh_multi_array_${op1_type[2]}_p out,
                                                     ${op2_type[1]} rhs);
%end for
%end if
%end for


// Binary functions

%for $op, $opcode, $opname, $opcount, $typesigs in $elementwise
%if $opcode != "BH_IDENTITY" and opcount == 3
%for $op1_type, $op2_type, $op3_type in $typesigs

DLLEXPORT void bh_multi_array_${op2_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                                    const bh_multi_array_${op2_type[2]}_p lhs,
                                    const bh_multi_array_${op3_type[2]}_p rhs);
DLLEXPORT void bh_multi_array_${op2_type[2]}_${opname}_scalar_lhs(bh_multi_array_${op1_type[2]}_p out,
                                                ${op2_type[1]} lhs,
                                                const bh_multi_array_${op3_type[2]}_p rhs);
DLLEXPORT void bh_multi_array_${op2_type[2]}_${opname}_scalar_rhs(bh_multi_array_${op1_type[2]}_p out,
                                                const bh_multi_array_${op2_type[2]}_p lhs,
                                                ${op3_type[1]} rhs);
%end for
%end if
%end for

// Unary functions

%for $op, $opcode, $opname, $opcount, $typesigs in $elementwise
%if $opcode != "BH_IDENTITY" and opcount == 2
%for $op1_type, $op2_type in $typesigs
%if $opcode == "BH_ISNAN" or $opcode == "BH_ISINF" or $opcode == "BH_REAL" or $opcode == "BH_IMAG" or $opcode == "BH_ABSOLUTE"

DLLEXPORT void bh_multi_array_${op2_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                             const bh_multi_array_${op2_type[2]}_p rhs);
%else
DLLEXPORT void bh_multi_array_${op1_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                             const bh_multi_array_${op2_type[2]}_p rhs);
%end if
%end for
%end if
%end for

// Reduction functions

%for $op, $opcode, $opname, $opcount, $typesigs in $reduction
%for $op1_type, $op2_type, $op3_type in $typesigs
DLLEXPORT void bh_multi_array_${op2_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                                    const bh_multi_array_${op2_type[2]}_p in,
                                    ${op3_type[1]} axis);
%end for
%end for

// Accumulate functions

%for $op, $opcode, $opname, $opcount, $typesigs in $accumulate
%for $op1_type, $op2_type, $op3_type in $typesigs
DLLEXPORT void bh_multi_array_${op2_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                                    const bh_multi_array_${op2_type[2]}_p in,
                                    ${op3_type[1]} axis);
%end for
%end for

#ifdef __cplusplus
}
#endif

#endif
