#compiler-settings
directiveStartToken = %
#end compiler-settings

#include <bohrium.hpp>
#include <bh_c_data_types.h>
#include <bh_c_interface.h>
#include "bh_c_type_definitions.hpp"


%set $elementwise = $data[0]
%set $reduction = $data[1]
%set $accumulate = $data[2]

using namespace bxx;

// Copy methods

%for $op, $opcode, $opname, $opcount, $typesigs in $elementwise
%if $opcode == "BH_IDENTITY"
%for $op1_type, $op2_type in $typesigs
void bh_multi_array_${op1_type[2]}_identity_${op2_type[2]}(bh_multi_array_${op1_type[2]}_p out,
                                                const bh_multi_array_${op2_type[2]}_p rhs) {

    multi_array<${op1_type[0]}> *o = (multi_array<${op1_type[0]}> *) out;
    multi_array<${op2_type[0]}> *r = (multi_array<${op2_type[0]}> *) rhs;
    ${op}(*o, *r);
}
void bh_multi_array_${op1_type[2]}_identity_${op2_type[2]}_scalar(bh_multi_array_${op1_type[2]}_p out,
                                                     ${op2_type[1]} rhs) {

    multi_array<${op1_type[0]}> *o = (multi_array<${op1_type[0]}> *) out;
    ${op2_type[0]} r;
%if $op2_type[2] == "complex64" or $op2_type[2] == "complex128"
    r.real(rhs.real);
    r.imag(rhs.imag);
%else
    r = rhs;
%end if
    ${op}(*o, r);
}
%end for
%end if
%end for

// Binary functions

%for $op, $opcode, $opname, $opcount, $typesigs in $elementwise
%if $opcode != "BH_IDENTITY" and opcount == 3
%for $op1_type, $op2_type, $op3_type in $typesigs
void bh_multi_array_${op2_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                                    const bh_multi_array_${op2_type[2]}_p lhs,
                                    const bh_multi_array_${op3_type[2]}_p rhs) {
    multi_array<${op1_type[0]}> *o = (multi_array<${op1_type[0]}> *) out;
    multi_array<${op2_type[0]}> *l = (multi_array<${op2_type[0]}> *) lhs;
    multi_array<${op3_type[0]}> *r = (multi_array<${op3_type[0]}> *) rhs;
    ${op}(*o, *l, *r);
}
void bh_multi_array_${op2_type[2]}_${opname}_scalar_lhs(bh_multi_array_${op1_type[2]}_p out,
                                                ${op2_type[1]} lhs,
                                                const bh_multi_array_${op3_type[2]}_p rhs) {
    multi_array<${op1_type[0]}> *o = (multi_array<${op1_type[0]}> *) out;
    multi_array<${op3_type[0]}> *r = (multi_array<${op3_type[0]}> *) rhs;
    ${op2_type[0]} l;
%if $op2_type[2] == "complex64" or $op2_type[2] == "complex128"
    l.real(lhs.real);
    l.imag(lhs.imag);
%else
    l = lhs;
%end if
    ${op}(*o, l, *r);
}
void bh_multi_array_${op2_type[2]}_${opname}_scalar_rhs(bh_multi_array_${op1_type[2]}_p out,
                                                const bh_multi_array_${op2_type[2]}_p lhs,
                                                ${op3_type[1]} rhs) {
    multi_array<${op1_type[0]}> *o = (multi_array<${op1_type[0]}> *) out;
    multi_array<${op2_type[0]}> *l = (multi_array<${op2_type[0]}> *) lhs;
    ${op3_type[0]} r;
%if $op3_type[2] == "complex64" or $op3_type[2] == "complex128"
    r.real(rhs.real);
    r.imag(rhs.imag);
%else
    r = rhs;
%end if
    ${op}(*o, *l, r);
}

%end for

%end if
%end for

// Unary functions

%for $op, $opcode, $opname, $opcount, $typesigs in $elementwise
%if $opcode != "BH_IDENTITY" and opcount == 2
%for $op1_type, $op2_type in $typesigs
%if $opcode == "BH_ISNAN" or $opcode == "BH_ISINF" or $opcode == "BH_REAL" or $opcode == "BH_IMAG" or $opcode == "BH_ABSOLUTE"
void bh_multi_array_${op2_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                             const bh_multi_array_${op2_type[2]}_p rhs) {
%else
void bh_multi_array_${op1_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                             const bh_multi_array_${op2_type[2]}_p rhs) {
%end if
    multi_array<${op1_type[0]}> *o = (multi_array<${op1_type[0]}> *) out;
    multi_array<${op2_type[0]}> *r = (multi_array<${op2_type[0]}> *) rhs;
    ${op}(*o, *r);
}
%end for

%end if
%end for


// Reduction functions

%for $op, $opcode, $opname, $opcount, $typesigs in $reduction
%for $op1_type, $op2_type, $op3_type in $typesigs
void bh_multi_array_${op2_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                                    const bh_multi_array_${op2_type[2]}_p in,
                                    ${op3_type[1]} axis) {
    multi_array<${op1_type[0]}> *o = (multi_array<${op1_type[0]}> *) out;
    multi_array<${op2_type[0]}> *i = (multi_array<${op2_type[0]}> *) in;
    ${op}(*o, *i, axis);
}
%end for
%end for

// Accumulate functions

%for $op, $opcode, $opname, $opcount, $typesigs in $accumulate
%for $op1_type, $op2_type, $op3_type in $typesigs
void bh_multi_array_${op2_type[2]}_${opname}(bh_multi_array_${op1_type[2]}_p out,
                                    const bh_multi_array_${op2_type[2]}_p in,
                                    ${op3_type[1]} axis) {
    multi_array<${op1_type[0]}> *o = (multi_array<${op1_type[0]}> *) out;
    multi_array<${op2_type[0]}> *i = (multi_array<${op2_type[0]}> *) in;
    ${op}(*o, *i, axis);
}
%end for
%end for
