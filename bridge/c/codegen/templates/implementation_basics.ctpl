#slurp
#compiler-settings
directiveStartToken = %
#end compiler-settings
%slurp
%set $ops = $data


#include <bohrium.hpp>
#include <bh_c_data_types.h>
#include <bh_c_interface.h>
#include "bh_c_type_definitions.hpp"
#include <bh.h>

using namespace bxx;

// Common runtime methods
void bh_runtime_flush(void) {
    Runtime::instance().flush();
}

// Shutdown Bohrium
void bh_runtime_shutdown(void){
   //delete &Runtime::instance();
}

%for $ctype, $bh_atype, $bh_ctype, $bh_enum in $ops

// $bh_enum

// Create a view from existing data pointer
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_from_data(${bh_atype}* data, int64_t nelem)
{
    bh_multi_array_${bh_ctype}_p r = bh_multi_array_${bh_ctype}_new_empty(1, &nelem);
    bh_multi_array_${bh_ctype}_set_data(r, data);

    return r;
}

// Gets the base from a view
bh_base_p bh_multi_array_${bh_ctype}_get_base(const bh_multi_array_${bh_ctype}_p self)
{
    return ((multi_array<${ctype}>*)self)->meta.base;
}

// Gets the data pointer from a view
${bh_atype}* bh_multi_array_${bh_ctype}_get_data(const bh_multi_array_${bh_ctype}_p self)
{
    return (${bh_atype}*)((bh_multi_array_${bh_ctype}_get_base(self))->data);
}

// Gets the data pointer from a base and force memory allocation
// Return NULL when out of memory
${bh_atype}* bh_multi_array_${bh_ctype}_get_data_and_force_alloc(const bh_multi_array_${bh_ctype}_p self)
{
    bh_base* base = bh_multi_array_${bh_ctype}_get_base(self);
    if(bh_data_malloc(base) != 0)
        return NULL;

    return (${bh_atype}*)(base->data);
}

// Gets the number of elements in the underlying data
int64_t bh_multi_array_${bh_ctype}_get_data_nelem(const bh_multi_array_${bh_ctype}_p self)
{
    return bh_multi_array_${bh_ctype}_get_base(self)->nelem;
}

// Sets the data pointer for a view
void bh_multi_array_${bh_ctype}_set_data(bh_multi_array_${bh_ctype}_p self, ${bh_atype}* data)
{
    bh_multi_array_${bh_ctype}_get_base(self)->data = data;
}

// Nullify the data pointer for a base
void bh_multi_array_${bh_ctype}_nullify_data(bh_multi_array_${bh_ctype}_p self)
{
    bh_multi_array_${bh_ctype}_set_data(self, NULL);
}

// Sync the current base
void bh_multi_array_${bh_ctype}_sync(const bh_multi_array_${bh_ctype}_p self)
{
    bh_sync(*((multi_array<${ctype}>*)self));
}

// Discard the current base
void bh_multi_array_${bh_ctype}_discard(const bh_multi_array_${bh_ctype}_p self)
{
    bh_discard(*((multi_array<${ctype}>*)self));
}

// Sets the temp status of an array
void bh_multi_array_${bh_ctype}_set_temp(const bh_multi_array_${bh_ctype}_p self, bh_bool temp)
{
    ((multi_array<${ctype}>*)self)->setTemp(temp);
}

// Gets the temp status of an array
bh_bool bh_multi_array_${bh_ctype}_get_temp(const bh_multi_array_${bh_ctype}_p self)
{
    return ((multi_array<${ctype}>*)self)->getTemp();
}


// Construct a new array from an view
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_view(const bh_multi_array_${bh_ctype}_p source, uint64_t rank, const int64_t start, const int64_t* shape, const int64_t* stride)
{
    multi_array<${ctype}>* result = new multi_array<${ctype}>(bh_multi_array_${bh_ctype}_get_base(source), rank, start, shape, stride);

    result->setTemp(false);
    return (bh_multi_array_${bh_ctype}_p)result;    
}


// Construct a new sized array
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_empty(uint64_t rank, const int64_t* shape) {
    multi_array<${ctype}>* result = new multi_array<${ctype}>(rank, shape);
    result->setTemp(false);
    result->link();
    return (bh_multi_array_${bh_ctype}_p)result;
}

%if $bh_ctype != "bool8"
// Construct a new zero-filled array
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_zeroes(uint64_t rank, const int64_t* shape) {
    multi_array<${ctype}>* result = new multi_array<${ctype}>(rank, shape);
    result->setTemp(false);
    result->link();
    *result = (${ctype})0;

    return (bh_multi_array_${bh_ctype}_p)result;
}

// Construct a new one-filled array
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_ones(uint64_t rank, const int64_t* shape) {
    multi_array<${ctype}>* result = new multi_array<${ctype}>(rank, shape);
    result->setTemp(false);
    result->link();
    *result = (${ctype})1;

    return (bh_multi_array_${bh_ctype}_p)result;
}
%end if

%if $bh_ctype == "uint64" or $bh_ctype == "uint32"
// Construct a new array with sequential numbers
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_range(uint64_t size) {
    multi_array<${ctype}> *result = &range<${ctype}>(size);
    result->setTemp(false);
    return (bh_multi_array_${bh_ctype}_p)result;
}
%end if

%if $bh_ctype == "uint64"
// Construct a new random-filled array using Random123
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_random123(uint64_t length, uint64_t start, uint64_t key) {
    multi_array<${ctype}> *result = new multi_array<${ctype}>(length);
    result->setTemp(false);
    result->link();

    return (bh_multi_array_${bh_ctype}_p)&(bh_random<${ctype}>(*result, start, key));
}
%end if

// Construct a new array, filled with the specified value
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_value(const ${bh_atype} value, uint64_t rank, const int64_t* shape) {
    multi_array<${ctype}>* result = new multi_array<${ctype}>(rank, shape);
    result->setTemp(false);
    result->link();
%if $bh_ctype == "complex64" or $bh_ctype == "complex128"
    ${ctype} t;
    t.real(value.real);
    t.imag(value.imag);

    *result = t;
%else
    *result = value;
%end if

    return (bh_multi_array_${bh_ctype}_p)result;
}

// Construct a copy of the array
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_new_copy(bh_multi_array_${bh_ctype}_p other) {
    return (bh_multi_array_${bh_ctype}_p)new multi_array<${ctype}>(*((multi_array<${ctype}>*)other));
}

// Destroy the pointer and release resources
void bh_multi_array_${bh_ctype}_destroy(bh_multi_array_${bh_ctype}_p self) {
    delete ((multi_array<${ctype}>*)self);
}

// Gets the number of elements in the array
uint64_t bh_multi_array_${bh_ctype}_get_length(bh_multi_array_${bh_ctype}_p self) {
    return ((multi_array<${ctype}>*)self)->len();
}

// Gets the number of dimensions in the array
uint64_t bh_multi_array_${bh_ctype}_get_rank(bh_multi_array_${bh_ctype}_p self) {
    return ((multi_array<${ctype}>*)self)->getRank();
}

// Gets the number of elements in the dimension
uint64_t bh_multi_array_${bh_ctype}_get_dimension_size(bh_multi_array_${bh_ctype}_p self, const int64_t size) {
    return ((multi_array<${ctype}>*)self)->shape(size);
}

// Update with an data
void bh_multi_array_${bh_ctype}_assign_data(bh_multi_array_${bh_ctype}_p self, const void* data) {
    (*((multi_array<${ctype}>*)self))((${ctype}*)data);
}

// Flatten view
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_flatten(bh_multi_array_${bh_ctype}_p self) {
    return (bh_multi_array_${bh_ctype}_p)&flatten((*((multi_array<${ctype}>*)self)));
}

// Transpose view
bh_multi_array_${bh_ctype}_p bh_multi_array_${bh_ctype}_transpose(bh_multi_array_${bh_ctype}_p self) {
    return (bh_multi_array_${bh_ctype}_p)&transpose((*((multi_array<${ctype}>*)self)));
}

%if $bh_atype == "bh_complex64" or $bh_atype == "bh_complex128"
// Sum
${bh_atype} bh_multi_array_${bh_ctype}_sum(bh_multi_array_${bh_ctype}_p self) {
    ${bh_atype} t1;
    ${ctype} t0 = scalar(sum(*((multi_array<${ctype}>*)self)));
    t1.real = t0.real();
    t1.imag = t0.imag();
    return t1;
}
// Product
${bh_atype} bh_multi_array_${bh_ctype}_product(bh_multi_array_${bh_ctype}_p self) {
    ${bh_atype} t1;
    ${ctype} t0 = scalar(product(*((multi_array<${ctype}>*)self)));
    t1.real = t0.real();
    t1.imag = t0.imag();
    return t1;
}
%else if $bh_atype == "bh_bool"

// All
${bh_atype} bh_multi_array_${bh_ctype}_all(bh_multi_array_${bh_ctype}_p self) {
    return scalar(all(*((multi_array<${ctype}>*)self)));
}

// Any
${bh_atype} bh_multi_array_${bh_ctype}_any(bh_multi_array_${bh_ctype}_p self) {
    return scalar(any(*((multi_array<${ctype}>*)self)));
}

%else
// Sum
${bh_atype} bh_multi_array_${bh_ctype}_sum(bh_multi_array_${bh_ctype}_p self) {
    return scalar(sum(*((multi_array<${ctype}>*)self)));
}
// Product
${bh_atype} bh_multi_array_${bh_ctype}_product(bh_multi_array_${bh_ctype}_p self) {
    return scalar(product(*((multi_array<${ctype}>*)self)));
}
%end if

%if $bh_atype != "bh_complex64" and $bh_atype != "bh_complex128"

// Max
${bh_atype} bh_multi_array_${bh_ctype}_max(bh_multi_array_${bh_ctype}_p self) {
    return scalar(max(*((multi_array<${ctype}>*)self)));
}

// Min
${bh_atype} bh_multi_array_${bh_ctype}_min(bh_multi_array_${bh_ctype}_p self) {
    return scalar(min(*((multi_array<${ctype}>*)self)));
}

%end if

    %for $ctype2, $bh_atype2, $bh_ctype2, $bh_enum2 in $ops
        %for $ctype3, $bh_atype3, $bh_ctype3, $bh_enum3 in $ops
            %if $bh_ctype2 == $bh_ctype3
//Register an extension method, return 0 on success and -1 when the method isn't supported
int bh_multi_array_extmethod_${bh_ctype}_${bh_ctype2}_${bh_ctype3}(const char *name, bh_multi_array_${bh_ctype}_p out, bh_multi_array_${bh_ctype2}_p in1, bh_multi_array_${bh_ctype3}_p in2) {

    try{
        Runtime::instance().enqueue_extension(name, *((multi_array<${ctype}>*) out), *((multi_array<${ctype2}>*) in1), *((multi_array<${ctype3}>*) in2));
    }catch (...){
        return -1;
    }
    return 0;
}
            %end if
        %end for
    %end for

%end for
