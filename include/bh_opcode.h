
/*
 * Do not edit this file. It has been auto generate by 
 * ../core/codegen/gen_opcodes.py at 17/01/2013.
 */

#ifndef __CPHVB_OPCODE_H
#define __CPHVB_OPCODE_H

#include "bh_type.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Codes for known oparations */
enum /* bh_opcode */
{
        CPHVB_ADD,		// Add arguments element-wise.
        CPHVB_SUBTRACT,		// Subtract arguments, element-wise.
        CPHVB_MULTIPLY,		// Multiply arguments element-wise.
        CPHVB_DIVIDE,		// Divide arguments element-wise.
        CPHVB_POWER,		// First array elements raised to powers from second array, element-wise.
        CPHVB_ABSOLUTE,		// Calculate the absolute value element-wise.
        CPHVB_GREATER,		// Return the truth value of (x1 > x2) element-wise.
        CPHVB_GREATER_EQUAL,		// Return the truth value of (x1 >= x2) element-wise.
        CPHVB_LESS,		// Return the truth value of (x1 < x2) element-wise.
        CPHVB_LESS_EQUAL,		// Return the truth value of (x1 =< x2) element-wise.
        CPHVB_EQUAL,		// Return (x1 == x2) element-wise.
        CPHVB_NOT_EQUAL,		// Return (x1 != x2) element-wise.
        CPHVB_LOGICAL_AND,		// Compute the truth value of x1 AND x2 elementwise.
        CPHVB_LOGICAL_OR,		// Compute the truth value of x1 OR x2 elementwise.
        CPHVB_LOGICAL_XOR,		// Compute the truth value of x1 XOR x2, element-wise.
        CPHVB_LOGICAL_NOT,		// Compute the truth value of NOT x elementwise.
        CPHVB_MAXIMUM,		// Element-wise maximum of array elements.
        CPHVB_MINIMUM,		// Element-wise minimum of array elements.
        CPHVB_BITWISE_AND,		// Compute the bit-wise AND of two arrays element-wise.
        CPHVB_BITWISE_OR,		// Compute the bit-wise OR of two arrays element-wise.
        CPHVB_BITWISE_XOR,		// Compute the bit-wise XOR of two arrays element-wise.
        CPHVB_INVERT,		// Compute bit-wise inversion, or bit-wise NOT, element-wise.
        CPHVB_LEFT_SHIFT,		// Shift the bits of an integer to the left.
        CPHVB_RIGHT_SHIFT,		// Shift the bits of an integer to the right.
        CPHVB_COS,		// Cosine elementwise.
        CPHVB_SIN,		// Trigonometric sine, element-wise.
        CPHVB_TAN,		// Compute tangent element-wise.
        CPHVB_COSH,		// Hyperbolic cosine, element-wise.
        CPHVB_SINH,		// Hyperbolic sine, element-wise.
        CPHVB_TANH,		// Compute hyperbolic tangent element-wise.
        CPHVB_ARCSIN,		// Inverse sine, element-wise.
        CPHVB_ARCCOS,		// Trigonometric inverse cosine, element-wise.
        CPHVB_ARCTAN,		// Trigonometric inverse tangent, element-wise.
        CPHVB_ARCSINH,		// Inverse hyperbolic sine elementwise.
        CPHVB_ARCCOSH,		// Inverse hyperbolic cosine, elementwise.
        CPHVB_ARCTANH,		// Inverse hyperbolic tangent elementwise.
        CPHVB_ARCTAN2,		// Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly.
        CPHVB_EXP,		// Calculate the exponential of all elements in the input array.
        CPHVB_EXP2,		// Calculate `2**p` for all `p` in the input array.
        CPHVB_EXPM1,		// Calculate ``exp(x) - 1`` for all elements in the array.
        CPHVB_LOG,		// Natural logarithm, element-wise.
        CPHVB_LOG2,		// Base-2 logarithm of `x`.
        CPHVB_LOG10,		// Return the base 10 logarithm of the input array, element-wise.
        CPHVB_LOG1P,		// Return the natural logarithm of one plus the input array, element-wise.
        CPHVB_SQRT,		// Return the positive square-root of an array, element-wise.
        CPHVB_CEIL,		// Return the ceiling of the input, element-wise.
        CPHVB_TRUNC,		// Return the truncated value of the input, element-wise.
        CPHVB_FLOOR,		// Return the floor of the input, element-wise.
        CPHVB_RINT,		// Round elements of the array to the nearest integer.
        CPHVB_MOD,		// Return the element-wise remainder of division.
        CPHVB_ISNAN,		// Test for NaN values.
        CPHVB_ISINF,		// Test for infinity values.
        CPHVB_IDENTITY,		// The identity function that returns the input value converted to the output data type.
        CPHVB_DISCARD,		// System instruction that informs the child component to forget the array and release any metadata allocated.
        CPHVB_FREE,		// System instruction that informs the child component to deallocate the data storage associated with the array.
        CPHVB_SYNC,		// System instruction that informs the child component to make data synchronized and available.
        CPHVB_NONE,		// A opcode that should be ignored.
        CPHVB_USERFUNC,		// System instruction that represents a user-defined function registered by the Bridge.

    CPHVB_NO_OPCODES    // The amount of opcodes
};

#ifdef __cplusplus
}
#endif

#endif
