Running gen_opcodes.py will generate include/bh_opcode.h and core/bh_opcode.c

The file ''opcodes.json'' contains a definition of all opcodes in Bohrium,
it uses the JSON (JavaScript Object Notation) syntax <http://json.org>.

The file contains a list of opcode definitions on the form::

    {
        "opcode":  "BH_ADD",
        "doc":      "Add arguments element-wise.",
        "code":     "op1 = op2 + op3",
        "nop":      3,
        "id":     1,
        "system_opcode": false,
        "types": [
            ["BH_BOOL", "BH_BOOL", "BH_BOOL"],
            ["BH_FLOAT32", "BH_FLOAT32", "BH_FLOAT32"],
            ["BH_UINT8", "BH_UINT8", "BH_UINT8"],
        ]
        "layout": [
                [ "C", "C", "C" ],
                [ "C", "C", "K" ]
        ]
    }

A description of the opcode structure follows::

opcode
  The unique symbol identifying a Bohrium opcode.
doc
  A textual description of the opcode.
code
  A bried code-snippet illustrating the opcode-instruction.
id
  The numeric ID of the operation
nop
  The amount of operands the instruction uses.
system_opcode
  Specifies whether a given opcode is a regular arithmetic instruction or a special system instruction.
elementwise
  Specifies whether a given opcode is a elementwise instruction or not
types
  A list of lists where each list is a valid type-signature for the opcode. In the example above the ADD opcode can add bools, floats and unsigned short integers. NB: the first type is the output type and the rest is the input types.
layout
  A list of lists where each list is a valid layout-signature for the opcode.
