/*
 * Copyright 2012 Mads R. B. Kristensen <madsbk@gmail.com>
 *
 * This file is part of cphVB <http://code.google.com/p/cphvb/>.
 *
 * cphVB is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * cphVB is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with cphVB. If not, see <http://www.gnu.org/licenses/>.
 */
  
 /*
 * This is the definition of all opcodes in cphVB. It uses the JSON 
 * (JavaScript Object Notation) syntax <http://json.org>.
 *
 * It contains a dictionary of all opcodes in the cphVB project. 
 * The format is mostly self-explaining but the "types" key needs some 
 * explanation. It contains a dictionary of all input data types 
 * supported by the associated opcode and each supported input type 
 * has a list of suppored output data types. 
 * Note that multiple inputs to an instruction should always have 
 * identical data types.
 *
 * The "system_opcode" specifies whether a given opcode is a regular 
 * arithmetic instruction or a special system instruction.
 */

    {
    "CPHVB_ABSOLUTE": {
        "doc": "Calculate the absolute value element-wise.",
        "code": "op1 = op2 < 0.0 ? -op2: op2",
        "nop": 2, 
        "opcode": "CPHVB_ABSOLUTE", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_ADD": {
        "doc": "Add arguments element-wise.",
        "code": "op1 = op2 + op3",
        "nop": 3, 
        "opcode": "CPHVB_ADD", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_ARCCOS": {
        "doc": "Trigonometric inverse cosine, element-wise.",
        "code": "op1 = acos( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_ARCCOS", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_ARCCOSH": {
        "doc": "Inverse hyperbolic cosine, elementwise.", 
        "code": "op1 = acosh( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_ARCCOSH", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_ARCSIN": {
        "doc": "Inverse sine, element-wise.",
        "code": "op1 = asign( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_ARCSIN", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_ARCSINH": {
        "doc": "Inverse hyperbolic sine elementwise.",
        "code": "op1 = asinh( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_ARCSINH", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_ARCTAN": {
        "doc": "Trigonometric inverse tangent, element-wise.",
        "code": "op1 = atan( op2, op3 )",
        "nop": 2, 
        "opcode": "CPHVB_ARCTAN", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_ARCTAN2": {
        "doc": "Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly.", 
        "code": "op1 = atan2( op2, op3 )",
        "nop": 3, 
        "opcode": "CPHVB_ARCTAN2", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_ARCTANH": {
        "doc": "Inverse hyperbolic tangent elementwise.", 
        "code": "op1 = atanh( op2, op3 )",
        "nop": 2, 
        "opcode": "CPHVB_ARCTANH", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_BITWISE_AND": {
        "doc": "Compute the bit-wise AND of two arrays element-wise.", 
        "code": "op1 = op2 & op3",
        "nop": 3, 
        "opcode": "CPHVB_BITWISE_AND", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_BITWISE_OR": {
        "doc": "Compute the bit-wise OR of two arrays element-wise.", 
        "code": "op1 = op2 | op3",
        "nop": 3, 
        "opcode": "CPHVB_BITWISE_OR", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_BITWISE_XOR": {
        "doc": "Compute the bit-wise XOR of two arrays element-wise.",
        "code": "op1 = op2 ^ op3",
        "nop": 3, 
        "opcode": "CPHVB_BITWISE_XOR", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_CEIL": {
        "doc": "Return the ceiling of the input, element-wise.",
        "code": "op1 = ceil( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_CEIL", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_COS": {
        "doc": "Cosine elementwise.", 
        "code": "op1 = cos( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_COS", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_COSH": {
        "doc": "Hyperbolic cosine, element-wise.", 
        "code": "op1 = cosh( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_COSH", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_DESTROY": {
        "doc": "System instruction that informs the child component to deallocate the array.",
        "code": "free(op1)",
        "nop": 1, 
        "opcode": "CPHVB_DESTROY", 
        "system_opcode": true, 
        "types": {}
    }, 
    "CPHVB_DISCARD": {
        "doc": "System instruction that informs the child component to forget the array.",
        "code": "forget(op1)",
        "nop": 1, 
        "opcode": "CPHVB_DISCARD", 
        "system_opcode": true, 
        "types": {}
    }, 
    "CPHVB_DIVIDE": {
        "doc": "Divide arguments element-wise.",
        "code": "op1 = op2 / op3",
        "nop": 3, 
        "opcode": "CPHVB_DIVIDE", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_EQUAL": {
        "doc": "Return (x1 == x2) element-wise.",
        "code": "op1 = op2 == op3",
        "nop": 3, 
        "opcode": "CPHVB_EQUAL", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_EXP": {
        "doc": "Calculate the exponential of all elements in the input array.", 
        "code": "op1 = exp( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_EXP", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_EXP2": {
        "doc": "Calculate `2**p` for all `p` in the input array.", 
        "code": "op1 = pow( 2, op2 )",
        "nop": 2, 
        "opcode": "CPHVB_EXP2", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_EXPM1": {
        "doc": "Calculate ``exp(x) - 1`` for all elements in the array.",
        "code": "op1 = expm1( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_EXPM1", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_LDEXP": {
        "doc": "Calculate ``x1 * 2**x2`` for all elements in the array.", 
        "code": "op1 = op2 * pow(2, op3)",
        "nop": 3, 
        "opcode": "CPHVB_LDEXP", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_FLOOR": {
        "doc": "Return the floor of the input, element-wise.",
        "code": "op1 = floor( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_FLOOR", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_MOD": {
        "doc": "Return the element-wise remainder of division.",
        "code": "op1 = op2 - floor(op2 / op3) * op3",
        "nop": 3, 
        "opcode": "CPHVB_MOD", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_GREATER": {
        "doc": "Return the truth value of (x1 > x2) element-wise.", 
        "code": "op1 = op2 > op3",
        "nop": 3, 
        "opcode": "CPHVB_GREATER", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_GREATER_EQUAL": {
        "doc": "Return the truth value of (x1 >= x2) element-wise.", 
        "code": "op1 = op2 >= op3",
        "nop": 3, 
        "opcode": "CPHVB_GREATER_EQUAL", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_HYPOT": {
        "doc": "Given the \"legs\" of a right triangle, return its hypotenuse.", 
        "code": "op1 = sqrt( pow(op2, 2) + pow(op3, 2) )",
        "nop": 3, 
        "opcode": "CPHVB_HYPOT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_IDENTITY": {
        "doc": "The identity function that returns the input value converted to the output data type.", 
        "code": "op1 = op2",
        "nop": 2, 
        "opcode": "CPHVB_IDENTITY", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL", 
                "CPHVB_INT8", 
                "CPHVB_UINT8", 
                "CPHVB_INT16", 
                "CPHVB_UINT16", 
                "CPHVB_INT32", 
                "CPHVB_UINT32", 
                "CPHVB_INT64", 
                "CPHVB_UINT64", 
                "CPHVB_FLOAT32", 
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_INVERT": {
        "doc": "Compute bit-wise inversion, or bit-wise NOT, element-wise.", 
        "code": "op1 = ~op2",
        "nop": 2, 
        "opcode": "CPHVB_INVERT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_LEFT_SHIFT": {
        "doc": "Shift the bits of an integer to the left.", 
        "code": "op1 = (op2) << (op3)",
        "nop": 3, 
        "opcode": "CPHVB_LEFT_SHIFT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_LESS": {
        "doc": "Return the truth value of (x1 < x2) element-wise.", 
        "code": "op1 = op2 < op3",
        "nop": 3, 
        "opcode": "CPHVB_LESS", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_LESS_EQUAL": {
        "doc": "Return the truth value of (x1 =< x2) element-wise.", 
        "code": "op1 = op2 <= op3",
        "nop": 3, 
        "opcode": "CPHVB_LESS_EQUAL", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_LOG": {
        "doc": "Natural logarithm, element-wise.", 
        "code": "op1 = log( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_LOG", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_LOG10": {
        "doc": "Return the base 10 logarithm of the input array, element-wise.", 
        "code": "op1 = log10( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_LOG10", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_LOG1P": {
        "doc": "Return the natural logarithm of one plus the input array, element-wise.", 
        "code": "op1 = log1p( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_LOG1P", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_LOG2": {
        "doc": "Base-2 logarithm of `x`.", 
        "code": "op1 = log2( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_LOG2", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_LOGICAL_AND": {
        "doc": "Compute the truth value of x1 AND x2 elementwise.", 
        "code": "op1 = op2 && op3",
        "nop": 3, 
        "opcode": "CPHVB_LOGICAL_AND", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_LOGICAL_NOT": {
        "doc": "Compute the truth value of NOT x elementwise.", 
        "code": "op1 = !op2",
        "nop": 2, 
        "opcode": "CPHVB_LOGICAL_NOT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_LOGICAL_OR": {
        "doc": "Compute the truth value of x1 OR x2 elementwise.", 
        "code": "op1 = op2 || op3",
        "nop": 3, 
        "opcode": "CPHVB_LOGICAL_OR", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_LOGICAL_XOR": {
        "doc": "Compute the truth value of x1 XOR x2, element-wise.", 
        "code": "op1 = (!op2 != !op3)",
        "nop": 3, 
        "opcode": "CPHVB_LOGICAL_XOR", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_MAXIMUM": {
        "doc": "Element-wise maximum of array elements.", 
        "code": "op1 = op2 < op3 ? op3 : op2",
        "nop": 3, 
        "opcode": "CPHVB_MAXIMUM", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_MINIMUM": {
        "doc": "Element-wise minimum of array elements.", 
        "code": "op1 = op2 < op3 ? op2 : op3",
        "nop": 3, 
        "opcode": "CPHVB_MINIMUM", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_MULTIPLY": {
        "doc": "Multiply arguments element-wise.", 
        "code": "op1 = op2 * op3",
        "nop": 3, 
        "opcode": "CPHVB_MULTIPLY", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_NEGATIVE": {
        "doc": "Returns an array with the negative of each element of the original array.", 
        "code": "op1 = -op2",
        "nop": 2, 
        "opcode": "CPHVB_NEGATIVE", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_NONE": {
        "doc": "A opcode that should be ignored.", 
        "code": "No operation.",
        "nop": 0, 
        "opcode": "CPHVB_NONE", 
        "system_opcode": false, 
        "types": {}
    }, 
    "CPHVB_NOT_EQUAL": {
        "doc": "Return (x1 != x2) element-wise.", 
        "code": "op1 = op2 != op3",
        "nop": 3, 
        "opcode": "CPHVB_NOT_EQUAL", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_INT8": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_POWER": {
        "doc": "First array elements raised to powers from second array, element-wise.", 
        "code": "op1 = pow( op2, op3 )",
        "nop": 3, 
        "opcode": "CPHVB_POWER", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_RECIPROCAL": {
        "doc": "Return the reciprocal of the argument, element-wise.", 
        "code": "op1 = 1.0 / op2",
        "nop": 2, 
        "opcode": "CPHVB_RECIPROCAL", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_RIGHT_SHIFT": {
        "doc": "Shift the bits of an integer to the right.", 
        "code": "op1 = (op2) >> (op3)",
        "nop": 3, 
        "opcode": "CPHVB_RIGHT_SHIFT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_RINT": {
        "doc": "Round elements of the array to the nearest integer.", 
        "code": "op1 = (op2 > 0.0) ? floor(op2 + 0.5) : ceil(op2 - 0.5)",
        "nop": 2, 
        "opcode": "CPHVB_RINT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_SIGN": {
        "doc": "Returns an element-wise indication of the sign of a number.", 
        "code": "op1 = op2 > 0.0 ? 1.0 : (op2 == 0 ? 0 : -1)",
        "nop": 2, 
        "opcode": "CPHVB_SIGN", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_SIGNBIT": {
        "doc": "Returns element-wise True where signbit is set (less than zero).",
        "code": "op1 = op2 < 0",
        "nop": 2, 
        "opcode": "CPHVB_SIGNBIT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_BOOL"
            ]
        }
    }, 
    "CPHVB_SIN": {
        "doc": "Trigonometric sine, element-wise.", 
        "code": "op1 = sin( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_SIN", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_SINH": {
        "doc": "Hyperbolic sine, element-wise.", 
        "code": "op1 = sinh( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_SINH", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_SQRT": {
        "doc": "Return the positive square-root of an array, element-wise.", 
        "code": "op1 = sqrt( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_SQRT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_SQUARE": {
        "doc": "Return the element-wise square of the input.", 
        "code": "op1 = op2 * op2",
        "nop": 2, 
        "opcode": "CPHVB_SQUARE", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_SUBTRACT": {
        "doc": "Subtract arguments, element-wise.", 
        "code": "op1 = op2 - op3",
        "nop": 3, 
        "opcode": "CPHVB_SUBTRACT", 
        "system_opcode": false, 
        "types": {
            "CPHVB_BOOL": [
                "CPHVB_BOOL"
            ], 
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ], 
            "CPHVB_INT16": [
                "CPHVB_INT16"
            ], 
            "CPHVB_INT32": [
                "CPHVB_INT32"
            ], 
            "CPHVB_INT64": [
                "CPHVB_INT64"
            ], 
            "CPHVB_INT8": [
                "CPHVB_INT8"
            ], 
            "CPHVB_UINT16": [
                "CPHVB_UINT16"
            ], 
            "CPHVB_UINT32": [
                "CPHVB_UINT32"
            ], 
            "CPHVB_UINT64": [
                "CPHVB_UINT64"
            ], 
            "CPHVB_UINT8": [
                "CPHVB_UINT8"
            ]
        }
    }, 
    "CPHVB_SYNC": {
        "doc": "System instruction that informs the child component to make data synchronized and available.", 
        "code": "COPY",
        "nop": 1, 
        "opcode": "CPHVB_SYNC", 
        "system_opcode": true, 
        "types": {}
    }, 
    "CPHVB_TAN": {
        "doc": "Compute tangent element-wise.", 
        "code": "op1 = tan( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_TAN", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_TANH": {
        "doc": "Compute hyperbolic tangent element-wise.", 
        "code": "op1 = tanh( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_TANH", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_TRUNC": {
        "doc": "Return the truncated value of the input, element-wise.", 
        "code": "op1 = trunc( op2 )",
        "nop": 2, 
        "opcode": "CPHVB_TRUNC", 
        "system_opcode": false, 
        "types": {
            "CPHVB_FLOAT32": [
                "CPHVB_FLOAT32"
            ], 
            "CPHVB_FLOAT64": [
                "CPHVB_FLOAT64"
            ]
        }
    }, 
    "CPHVB_USERFUNC": {
        "doc": "System instruction that represents a user-defined function registered by the Bridge.", 
        "code": "USER DEFINED BEHAVIOR",
        "nop": 0, 
        "opcode": "CPHVB_USERFUNC", 
        "system_opcode": true, 
        "types": {}
    }
}
