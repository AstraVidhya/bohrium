#!/usr/bin/env python
twoin_oneout = """CPHVB_ADD
CPHVB_SUBTRACT
CPHVB_MULTIPLY
CPHVB_DIVIDE
CPHVB_LOGADDEXP
CPHVB_LOGADDEXP2
CPHVB_TRUE_DIVIDE
CPHVB_FLOOR_DIVIDE
CPHVB_POWER
CPHVB_REMAINDER
CPHVB_MOD
CPHVB_FMOD
CPHVB_BITWISE_AND
CPHVB_BITWISE_OR
CPHVB_BITWISE_XOR
CPHVB_LOGICAL_AND
CPHVB_LOGICAL_OR
CPHVB_LOGICAL_XOR
CPHVB_LEFT_SHIFT
CPHVB_RIGHT_SHIFT
CPHVB_GREATER
CPHVB_GREATER_EQUAL
CPHVB_LESS
CPHVB_LESS_EQUAL
CPHVB_NOT_EQUAL
CPHVB_EQUAL
CPHVB_MAXIMUM
CPHVB_MINIMUM
CPHVB_LDEXP
"""

onein_oneout = """CPHVB_NEGATIVE
CPHVB_ABSOLUTE
CPHVB_RINT
CPHVB_SIGN
CPHVB_CONJ
CPHVB_EXP
CPHVB_EXP2
CPHVB_LOG2
CPHVB_LOG
CPHVB_LOG10
CPHVB_EXPM1
CPHVB_LOG1P
CPHVB_SQRT
CPHVB_SQUARE
CPHVB_RECIPROCAL
CPHVB_ONES_LIKE
CPHVB_SIN
CPHVB_COS
CPHVB_TAN
CPHVB_ARCSIN
CPHVB_ARCCOS
CPHVB_ARCTAN
CPHVB_ARCTAN2
CPHVB_HYPOT
CPHVB_SINH
CPHVB_COSH
CPHVB_TANH
CPHVB_ARCSINH
CPHVB_ARCCOSH
CPHVB_ARCTANH
CPHVB_DEG2RAD
CPHVB_RAD2DEG
CPHVB_LOGICAL_NOT
CPHVB_INVERT
CPHVB_ISFINITE
CPHVB_ISINF
CPHVB_ISNAN
CPHVB_SIGNBIT
CPHVB_FLOOR
CPHVB_CEIL
CPHVB_TRUNC
CPHVB_ISREAL
CPHVB_ISCOMPLEX
"""

types = """
CPHVB_BOOL
CPHVB_INT8
CPHVB_INT16
CPHVB_INT32
CPHVB_INT64
CPHVB_UINT8
CPHVB_UINT16
CPHVB_UINT32
CPHVB_UINT64
CPHVB_FLOAT16
CPHVB_FLOAT32
CPHVB_FLOAT64
"""

onein_twoout = """CPHVB_MODF
CPHVB_FREXP"""

tmpl = """template <typename T>
struct opcode<__OPC__, T> {
    static cphvb_error invoke(T *op1, T *op2, T *op3) {
        // TODO: implement
        return CPHVB_SUCCESS;
    }
};
"""

case_tmpl = """
    case __OPC__:
        opcode<__OPC__,cphvb_float32>::invoke( (d0 + off0), (d1 + off1), (d2 + off2) );
        break;"""

func = ''
case = ''

for i in (twoin_oneout + onein_oneout + onein_twoout ).split("\n"):
    func    += tmpl.replace('__OPC__', i)
    case    += case_tmpl.replace('__OPC__', i)

print func
print """
switch(instr->opcode) {
    %s
    default:
        return CPHVB_ERROR;
}""" % case
